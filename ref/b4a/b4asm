#!/usr/bin/perl
#-------------------------------------------------------------
# b4asm : the b4 assembler for 32-bit binary data
# copyright (c) 2012 michal j wallace. all rights reserved.
# licensed to the public under the ISC or X11 license.
#-------------------------------------------------------------
# usage: b4a < code.b4a > binary.dat
#-------------------------------------------------------------
# comments  : anything between parens
#   - may not be nested
#   - do not require spaces
#   - may not span lines
#   ex: (comment) ( so is this )
#
# whitespace is ignored, except to serve as a separator
#
# numeric literals : hexidecimal only
#   - unprefixed sequence of hex digits
#   - length must be 2,4,6,or 8 digits
#   - result is always padded to 32 bits
#   ex: 01 abcd => 00 00 00 01 00 00 ab cd
#
# definitions :
#   given "xyz" is some sequence of non-whitespace chars,
#   - :xyz saves the position, writing nothing
#   - xyz expands to a hex string before hex parsing
#
#   ex: :^ 00 :a 01 a ^ => 00 01 00000001 00000000
#
#   note: this means you can redefine numbers.
#   it's probably not a great idea though.
#
#   redefining labels is perfectly valid syntax.
#
# any other input is an error.
#-----------------------------------------------------------

%defs = ();    # the dictionary that holds macros
$here = 0;     # a counter for the write head

# note: the trace information is marked up with minno
sub trace {
    print "$_[0]";
}

sub define {
    my ( $k, $v ) = @_;
    trace "def $k = $v";
    $defs{ $k } = $v;
}

sub handle_macros {
    foreach (@tokens = split) {
	# define new macros with ":"
        if ( s/^:(.+)$// ) { define( $1, $here ) }
	else {
	    # invoke macros just by mentioning them
	    if ( exists( $defs{ $_ } )) {
		$_ = sprintf( "%08x", $defs{ $_ });
	    }
	    $here++;
	}
    }
    $_ = join ' ', @tokens;
}


sub output_raw
{
    foreach (split)
    {
	# compile hex literals to unsigned int value
	$bytes = 0; $value = '';
	while ( s/^([0-9a-f]{2})// ) {
	    $bytes++;
	    $value .= chr hex $1;
	}
	
	# output the value, padded to 32 bits
	$pad = 0;
	if ( $bytes ) {
	    while ( $bytes + $pad < 4 ) { $pad++; print chr 0; }
	    die "value $_ too large on line $line"
		unless $bytes + $pad == 4;
	    print $value;
	}
	else { print "!invalid token '$_' on line $line." }
    }
}



# main loop
$line = 0;
while (<>) {

    chomp;                     trace "incoming line #$line :[$_]";
    $line++;
    uc;
    s/\(.*?\)//g;
    strip;
    next unless length;

    handle_macros;             trace "after macros";
    output_raw;
}
