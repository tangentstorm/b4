#+TITLE: b4.01 : wishlist

* NOTE on contributing to this project
** these are things that are off the critical path (for now)
** ~[#A]~ is easy, ~[#B]~ medium, ~[#C]~ advanced
** i could use help with the [[file:b4.00.tasklist.org][main tasklist]], too, but:
**** usually discover i need something out of order
**** probably best to chat on freenode/#b4 if you want to work on main tasklist
** licensing issues
- if you contribute / port something, make sure license is MIT/ [[http://en.wikipedia.org/wiki/ISC_license][ISC]] compatible ([[http://retroforth.org/license.html][retroforth license]] is ISC)
- [[http://www.freepascal.org/faq.var#general-license][freepascal]] code has a tendency to use MPL/LGPL style. I'm okay with that, too.

* WANT assembler
** TODO make something similar to  [[https://github.com/oriontransfer/PL0-Language-Tools/blob/master/pl0_assemblera.py][pl/0 language tools assembler.py]]
** DONE what is license on pl0 tools? -> relicensed under MIT when I asked
** TODO compare bytecodes for pl/0 machine and ngaro. see what we need to adjust.
Both are stack machines and the primitives look similar.
See also python -> ngaro translator below.
Combined with PL/0 tools, these would give us all the tools we need.
** NOTE I made a start on a completely different assembler in go/c4.py
** NOTE pretty sure retroforth has an assembler - see file:ref/crc-retro-wisdom.org

* WANT relational database (b4 has tiny relational database)
** [#C] [[http://en.wikipedia.org/wiki/B-tree][b-tree]] or [[http://en.wikipedia.org/wiki/B%2B_tree][b+-tree]] implementation                               :nga:
** [#A] codd's 8 relational operators                                  :nga:

There is psuedocode for all 8 here:

http://science.kennesaw.edu/~mguimara/3310/RA_SQL.htm

* WANT [#B] repl - probably follow itsyforth model
** DONE track down itsyforth license  ( it's MIT-style )
*** ask the author (john metcalf)
*** [[http://www.retroprogramming.com/2012/03/itsy-forth-1k-tiny-compiler.html][itsyforth interpreter]]

* WANT port of gamesketchlib to ngaro/retroforth/b4

I made the java/processing game library at http://gamesketchlib.org/ and will try to follow the same design patterns as I work on this system.

* WANT python bytecode -> ngaro translator
** [#A] research step : match up the two sets of bytecode

ngaro only has 30 instructions, python has around the same. There is much overlap, and in forth-like languages, it's very easy to translate things like this.

So it's possible that at least some python code should be able to run here. 

The first step would be to compile a table that compares and contrasts the two sets of bytecode:

[[http://docs.python.org/library/dis.html][python dis module]] and the opcode section in [[http://retroforth.org/docs/The_Ngaro_Virtual_Machine.html][ngaro-vm reference]]

** ?? pending above step, add new primitives to let us run python

probably the most dynamic aspects of python will not run well, but simpler python code probably can. 

* WANT modfile player.

I would really really like a modfile player for retro sounds and music. (don't know what modfiles are? see http://modarchive.org/ )

#+begin_quote me

[13:04] <dom96> I always wanted to compete in Ludum Dare. Sadly, nowadays there isn't enough time.
[13:05] <tangentstorm> http://web.archive.org/web/20080704164939/http://turcanator.tangentcode.com/
[13:05] <tangentstorm> this is a midi sequencer i wrote in pygame... i would love it if someone took that and turned it into the music engine for this system.
[13:06] <tangentstorm> not the graphics part... but the time/synchronization code for the music events
[13:07] <tangentstorm> to make something like this: http://www.photonstorm.com/flod

#+end_quote

* WANT emacs mode for colorforth-like languages

B4 is a a colorized language: you syntax-highlight it yourself, to simplify the parser, and words change meaning (verb tense) based on color.

This looks promising:

http://www.strangegizmo.com/forth/ColorForth/msg00263.html

I have already written a partial retroforth mode in file://etc/retro-mode.el

* WANT render org-files to something more readable.                   :elisp:
** github makes org-code ugly
** [#A] org itself does better job... make me a macro?
*** http://orgmode.org/
*** http://orgmode.org/worg/org-contrib/babel/ 
* WANT standalone org-babel-tangle (preferably in pascal)
* IDEA interface IDebuggable ?
It would probably have like a .tostring, plus menu options?

Not really sure what would be included in the interface, but I had the debugger in one section of my org-file for ngaro.pas.org, and then it got spread out.

* IDEA ramdisk / image layout
** things that need to be in ram somewhere early:
*** the first 256 cells are reserved for registers
*** they also leave room for 256 ngaro-style opcodes
**** (these may be device-specific opcodes, too)
*** first eight bytes should be magic # : utf-16 for the four corners
**** TODO lookup the code points
**** the bios needs to fit in the next 512 bytes
*** map disk pages to ram (probably 4k blocks)
**** maybe give blocks a negative number to indicate system/hardware?
**** this makes sense, as we may have multiple machines in one image
**** btree for where things are laid out in memory
*** maybe a version number / hash for the interpreter config?
*** primary console video ram
*** the basic 256-character font (codepoints + 16 bytes)
*** the registers / stack for each machine
** paging system
*** ngaro wants ram to be laid out in a specific way
*** the paging system would emulate contiguous ram
*** basically just like the processor does

* WANT clarify interfaces between the modules
#+DATE: [2012-09-20 Thu]
** module io : high level input/output abstraction
*** module io_nw - network
*** module iokb - keyboard
*** module iohd - hard drive
*** module ioss - sound system
*** module iovm - interface to the vm itself
*** module ioip - interprocess communication
** module vm : the virtual machine
** module vt : virtual terminal
** module ui : text widgets
** module sg : scenegraph
