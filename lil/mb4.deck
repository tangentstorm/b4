{deck}
version:1
card:0
size:[512,342]
name:"mb4.deck"

{card:home}

{module:mb4}
description:"the b4 virtual machine"
{script}


on _bytes n do
  each _ in range 4 r:bits.and[255,n] n:floor n/256 r end
end
on _ri a do sum(256^range 4)*vm.ram[a,4] end
on _wi a v do vm.ram[a,4]:_bytes[v] end

on ord c do first "%a" parse c end
on reg c do 4*ord[c]-64 end
# get/set registers
on _sr c v do _wi[reg[c] v] end
on _gr c v do _ri[reg[c]] end

HERE:reg["_"]    # continuosly append
THERE:reg["\\"]  # temp var when writing to specific address
# LAST:reg["^"]    # will be used for dictionary

vm.ip: 256
mod.reset: on reset do
  vm.ip: 256
  vm.ds: ()
  vm.cs: ()
  vm.ob: ()
  vm.vw: 4
end
mod.clear: on clear do
  vm.ram: array[1024 "u8"]
  _wi[HERE 256]
end
reset[] clear[]

on dtos do last vm.ds end
on dpop do r: last vm.ds vm.ds:-1 drop vm.ds r end
on dpop2 do r:dpop[] dpop[],r end
on dput x do vm.ds: vm.ds,x end
on cpop do r: last vm.cs vm.cs:-1 drop vm.cs r end
on cput x do vm.cs: vm.cs,x end
on here x do if x _wi[HERE x] else _ri[HERE] end end
on there x do if x _wi[THERE x] else _ri[THERE] end end

op.ad: on ad do dput[dpop[] + dpop[]] end
op.ml: on ml do dput[dpop[] * dpop[]] end
op.sb: on sb do y:dpop[] dput[dpop[]-y] end
op.dv: on dv do y:dpop[] dput[floor dpop[]/y] end
op.md: on md do dput[dpop[] % dpop[]] end # !!
op.sh: on sh do y:2^dpop[] dput[dpop[]*y] end
op.an: on an do dput[bits.and[dpop[] dpop[]]] end
op.or: on or do dput[bits.or[dpop[] dpop[]]] end
op.xr: on xr do dput[bits.xor[dpop[] dpop[]]] end
op.nt: on nt do dput[-1-dpop[]] end
op.zp: on zp do dpop[] end
op.eq: on eq do dput[-(dpop[] = dpop[])] end
op.lt: on lt do y:dpop[] dput[-(dpop[]<y)] end
op.du: on du do dput[dtos[]] end
op.sw: on sw do y:dpop[] x:dpop[] dput[y] dput[x]end
op.ov: on ov do dput[last -1 drop vm.ds] end
op.dc: on dc do cput[dpop[]] end
op.cd: on cd do dput[cpop[]] end


on rb do dput[vm.ram[dpop[]]] end
on ri do dput[_ri[dpop[]]] end
on wb do vm.ram[dpop[]]: dpop[] end
on wi do a:dpop[] v:dpop[] _wi[a v] end
op.rv: ri
op.wv: wi
op.vb: on vb do vm.vw:1  op.rv:rb  op.wv:wb end
op.vi: on vi do vm.vw:4  op.rv:ri  op.wv:wi end
op.rr: on rr r do dput[_ri[r]] end
op.ir: on ir r do v:_ri[r] _wi[r v+vm.vw] dput[v] end
op.wr: on wr r do v:dpop[] _wi[r v] end

op.lb: on lb do dput[vm.ram[vm.ip:vm.ip+1]] end
op.li: on li do dput[_ri[vm.ip+1]] vm.ip: vm.ip+4 end

on _goto a do vm.ip:(max 256,a)-1 end
on _hop do
  vm.ram.cast:"i8"
  _goto[vm.ip+vm.ram[vm.ip+1]]
  vm.ram.cast:"u8"
end
op.hp: on hp do _hop[] end
op.h0: on h0 do if dpop[] vm.ip:vm.ip+1 else _hop[] end end
op.jm: on jm do _goto[_ri[vm.ip+1]] end
op.cl: on cl do cput[vm.ip+4] _goto[_ri[vm.ip+1]] end
op.rt: on rt do _goto[cpop[]] end
op.nx: on rt do
  i:cpop[]-1 if i>0 cput[i] end
  if i>0 _hop[] else vm.ip:vm.ip+1 end
end

# immediately invoke a "dictionary" register
op.im: on im r do cput[vm.ip] _goto[_ri[4*r]] end
op.io: on io do
  m: "%a" parse vm.ram[vm.ip:vm.ip+1]
  if m="e" x:dpop[] vm.ob:vm.ob,("%a" format x)
  elseif m="R"
  else echo["no: io '",m] end
end


#--- canvas stuff

cvi.b: on cvib cv do wh:dpop2[] xy:dpop2[] cv.box[xy wh] end   # box (hollow)
cvi.c: on cvic cv do dput[180] cvi.n[cv] end                   # circle (xyr-)
cvi.d: on cvid cv do s:cv.size dput[s[0]] dput[s[1]] end       # query dimensions
cvi.f: on cvif cv do cv.pattern: x:dpop[] end                  # fill
cvi.l: on cvil cv do p1:dpop2[] cv.line[dpop[], p1] end        # line(p0p1-)
cvi.n: on cvin cv do  n:dpop[] r:dpop[] xy:dpop2[]             # n-gon (xyrn-)
  a: 2*pi * (range n)/n  a:a,1 take a
  cv.poly[flip floor 0.5+xy+r*(list cos a),list sin a]
end
cvi.r: on cvir cv do wh:dpop2[] xy:dpop2[] cv.rect[xy wh] end  # rect (filled)
cvi.s: on cvis cv do cv.brush: x:dpop[] end                    # stroke
op.cv: on cv do
  if mod.cv m:"%a" format dpop[]
    if m in cvi cvi[m][mod.cv]
    else echo["cv.no: '",m] end
  else echo["no cv!"] end
end


# ---------------------


on toHex n do
  if n < 0 "-%H" format -n else "%H" format n end
end
on isHex s do "%*.1o-%*.16r0123456789ABCDEF%z" parse s end
on unHex s do  p: "%.1o-%H" parse s  if p[0] 0-p[1] else p[1] end end

mod.showStack: on showStack xs do
  "%s: [%s]" format xs,(" " fuse toHex @ vm[xs])
end

mod.regop: on regop x do
  _c: "%[cmd]1.7o+`'!@:?"
  _r: "%[reg]1.32o@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_"
  _p: "" fuse _c,_r,"%[m]z" (_p parse x).m
end
# assert (1,1,0,0,0,1) regop@("@y","'C","`3",">>","`no","`Y")

#'* '! '\" '# '$ '% '& '' '( ') '* '+ ', '- '. '/
#'0 '1 '2 '3 '4 '5 '6 '7 '8 '9 ': '; '< '= '> '?
#'@ 'A 'B 'C 'D 'E 'F 'G 'H 'I 'J 'K 'L 'M 'N 'O
#'P 'Q 'R 'S 'T 'U 'V 'W 'X 'Y 'Z '[ '\\ '] '^ '_
#'` 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o
#'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z '{ '| '} '~ ^?

TBL:
".. ^A ^B ^C ^D ^E ^F ^G ^H ^I ^J ^K ^L ^M ^N ^O
^P ^Q ^R ^S ^T ^U ^V ^W ^X ^Y ^Z ^[ ^\\ ^] ^^ ^_
@@ @A @B @C @D @E @F @G @H @I @J @K @L @M @N @O
@P @Q @R @S @T @U @V @W @X @Y @Z @[ @\\ @] @@ @_
!@ !A !B !C !D !E !F !G !H !I !J !K !L !M !N !O
!P !Q !R !S !T !U !V !W !X !Y !Z ![ !\\ !] !! !_
+@ +A +B +C +D +E +F +G +H +I +J +K +L +M +N +O
+P +Q +R +S +T +U +V +W +X +Y +Z +[ +\\ +] ++ +_
ad sb ml dv md sh an or xr nt eq lt du sw ov zp
dc cd rv wv lb li jm hp h0 cl rt nx 9C 9D 9E 9F
A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AB AC AD AE AF
B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 BA BB BC BD tm cv
vb vi C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
D0 D1 D2 D3 D4 D5 D6 D7 D8 D9 DA DB DC DD DE DF
E0 E1 E2 E3 E4 E5 E6 E7 E8 E9 EA EB EC ED EE EF
F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC io db hl"
TBL: " " split " " fuse "\n" split TBL
TBL:select op:index code:value from TBL[32]: "' "


on imOp x do first extract op where (op>1)&(op<32)&(code=x) from TBL end

mod.dis: on dis i do first extract code where op=i from TBL end
mod.asm: on asm x do
  if r: extract op where code=x from TBL r
  else unHex[x] end
end

mod.step: on step do
  c:dis[o:vm.ram[vm.ip]]
  if c in op op[c][]
  elseif c=".." # ok
  elseif c[0]="^" op.im[o]
  elseif c[0]="@" op.rr[o]
  elseif c[0]="!" op.wr[o]
  elseif c[0]="+" op.ir[o]
  else  echo["step->",c,"(ignored)"] end
  vm.ip: vm.ip+1
end

RT: first extract op where code="rt" from TBL
mod.runToEnd: on runToEnd di do
  while !vm.ram[vm.ip]=RT step[] end step[]
  vm.ip: vm.ip+di # so imOp can not inc ip
end

mod.showMem: on showMem a do " " fuse dis @ vm.ram @ a + range 16 end
mod.showIp: on showIp do "ip: %02H" format vm.ip end
on assemble a s do n:count toks:" "split s  vm.ram[a,n]:raze asm@toks n end
on asm_via hp s do a:_ri[hp]  n:assemble[a s] _wi[hp a+n] end

mod.b4i: on b4i line do
  toks: extract value where value from " " split line
  state:IMM:0 ASM:1 CMT:2    hp:HERE # may be THERE later
  each tok in toks  t:tok[0]
    if (state=CMT) | (t="#") state:CMT
    elseif t="%"
      if     tok="%q" if deck reset[] else exit[0] end
      elseif tok="%R" reset[]
      elseif tok="%C" clear[]
      elseif tok="%s" step[]
      elseif tok="%e" runToEnd[]
      else echo["%.no: ",tok] end
    elseif t="?"
      if  regop[tok] echo["%08H" format _ri[reg[tok[1]]]]
      elseif tok="?i" echo[showIp[]]
      elseif tok="?d" echo[showStack["ds"]]
      elseif tok="?c" echo[showStack["cs"]]
      else hex: "?%[a]H%[m]z" parse tok
        if hex.m echo[showMem[hex.a]]
        else echo["?.no: ",tok] end
      end
    elseif t=":"
      state:ASM hp:HERE c:tok[1]
      if 2=count tok
        if regop[tok] h:here[] _sr[c h]
        elseif c=":" ok
        else echo[".no: ",tok] end
      else
        if tok=":" echo["no: :"]
        elseif (hex: ":%[a]H%[m]z" parse tok).m _wi[hp:THERE hex.a]
        else state:CMT echo["nyi: '%s'" format tok] end end
    elseif t="'"
      v: if tok="'" 32 else ord[tok[1]] end
      if state=ASM asm_via[hp tok]
      else vm.ds: vm.ds,v end
    elseif regop[tok] r:reg[c:tok[1]]
      if state=ASM echo["asm.todo: ", tok]
      elseif t="`" vm.ds: vm.ds,r
      elseif t="!" op.wr[r]
      elseif t="@" op.rr[r]
      elseif t="+" op.ir[r] end
    elseif tok in op
      # '..' executes as no-op. if you want to push 0, type '00'
      if state=ASM asm_via[hp tok] else op[tok][] end
    elseif tok=".."
      if state=ASM asm_via[hp tok] end
    elseif o:imOp[tok]
      if state=ASM asm_via[hp tok] else op.im[o] runToEnd[] end
    elseif isHex[tok]
      if state=ASM asm_via[hp tok] else vm.ds: vm.ds,unHex[tok] end
    else echo["no: %s" format cmd] end
  end
  if vm.ob echo[vm.ob] vm.ob:() end
end

mod.echo: on echo line do mod.echo[line] end
mod.set_cv: on set_cv cv do mod.cv: cv end
mod.set_echo: on set_echo fn do mod.echo: fn end
mod.TBL: TBL
mod.get_vm:on get_vm do vm end
{end}
