#+title: b4 implementation plan

* -- roadmap --
** TODO b4s (a tiny lisp-like interface)
** TODO finish memory alloctor
** TODO implement variants

* -- sprint --
** TODO separate bios from b4f
- bios
  - num : number i/o
  - trm : terminal commands
  - str : string i/o
  - ibf : allocate a 255-byte input buffer (+1 len cel)
- the rest goes into b4f, the forth-like interpreter

** TODO command to assemble a file                              :b4i:
** TODO implement 4ch symbol routines
** TODO implement nxcl 'allocator'                             :b4s:
** TODO read lists from input buffer                           :b4s:
** TODO reader macros for up/dn/qt                             :b4s:
** TODO implement lisp-style 'eval'                            :b4s:

* -- backlog --
** TODO rename 'mnemonics.org' to 'b4-opcodes.org'              :doc:
*** make mnemonics just a section
** TODO generate 16x16 opcode table for the docs                :doc:
** TODO [0/3] add assembler.org doc for b4a assembler syntax    :doc:
*** TODO describe label usage: :name name `name @name !name
*** TODO document character literals with 'x
*** TODO document .^ macro for linked lists
*** [0/3] TODO document built-in macros for structured programming
**** TODO .f .n       # isn't .n just nx? (should i drop nx?)
**** TODO .w .d .o    # maybe .o should be .l?
**** TODO .i .e .t    # think of '.i' as 'ifso'
** TODO document memory layout                                  :doc:
- 0000..007F holds the 32 named registers
- 0080..00FF holds internal/system registers
- 0100..0FFF reserved for bios
- usable ram starts at 1000

** TODO describe how b4i interactive assembler is different     :doc:
** TODO command to list known labels                            :b4i:
** TODO command to save a memory image                          :b4i:
** TODO command to load a memory image                          :b4i:
** TODO command to load a file into the input buffer            :b4i:
** TODO allow placing a cursor for "run to cursor" (^]) ?       :b4i:
** TODO command to set the start of view memory                 :b4i:
** TODO [0/4] integrate ideas from the b4.pas debugger          :b4i:
*** TODO show calls with their names
*** TODO run to cursor command
*** TODO step over command for calls
temporarily move the cursor to the next active cell,
and then 'run to cursor'
** TODO show/browse assigned names                              :b4ix:
** TODO show labels for calls                                   :b4ix:
** TODO show the return stack with labels                       :b4ix:

** TODO ui to edit the input buffer directly                    :b4ix:
** TODO allow setting arbitrary breakpoints                     :b4i:
** TODO break bios into smaller files (nums, term)              :bios:
** TODO finish and test the memory allocator                    :bios:mm:
** TODO describe existing forth interpreter                     :b4f:
*** TODO line editor
**** break on any key
**** read the key
**** emit corresponding character to the screen
**** wait for specific key (C-c ? Esc ?)

*** TODO process word from buffer
*** TODO lookup word in dictionary
**** traverse the chain
**** compare to ram
- last
- e-nm ("lb 4 ad")
- s-eq uses "inc" ("lb 1 ad")
- find (currently "word?")

*** TODO obtain the code and type fields
*** TODO execute the code

** TODO document how the dictionary gets bootstrapped           :b4f:
- uses .^ macro for linked list
- counted strings
- followed immediately by code
** TODO document 'word?'                                        :b4f:
- find definition
  - get last entry address
  - while entry address != 0 do:
    - use offset to find string
    - compare entry to goal string
    - if match, then leave address of value on stack
  - if entry = 0, say 'not found'
** TODO implement the colon compiler (=:=)                        :b4f:
*** TODO ':' defines new word
- creates new entry
- reads token for name
- copies token to heap
- turns on the compiler
*** TODO ';' emits =rt= and turns off the compiler
*** dictionary entry format
- prev: addr
- hash: (optional single cell with 32-bit hash/crc)
- word: str with len
- data: the data or value
*** create new entry:
  - last @ ,
  - here @ last !
  # - $goal hash ,
  - str,

*** 'str,' copies a string
  - args: start, length
  - duplicate and write the length
  - copy the string

*** copy tokens to token buffer
- read name
- write name

** TODO number/base                                             :b4f:
** TODO wait for input when input buffer exhausted              :b4f:
** TODO implement quote                                         :b4f:
* -- maybe later --
** TODO onboard line editor
** TODO "calculator mode" (send ascii chars)
- copy input bytes to buffer
- let enter trigger word

** TODO show b4f dictionary in the debugger
** TODO [4/9] implement io devices
*** DONE port 1 : keyboard
*** DONE port 2 : character generator
*** TODO extend character generator with ability to change bitmap font
*** DONE port 3 : force video update ( optional and not needed here )
*** TODO [10/10] port 4 : file i/o
**** DONE io op  1 | ...               -> 0      | save image
**** DONE io op  2 | filename          -> 0      | include a file
**** DONE io op -1 | filename, mode    -> handle | Open a file
**** DONE io op -2 | handle            -> flag   | Read a byte from a file
**** DONE io op -3 | character, handle -> flag   | Write a byte to a file
**** DONE io op -4 | handle            -> flag   | Close a file
**** DONE io op -5 | handle            -> offset | Return current location in file
**** DONE io op -6 | offset, handle    -> flag   | Seek a new location in file
**** DONE io op -7 | handle            -> size   | Return the size of a file
**** DONE io op -8 | filename          -> flag   | Delete a file.
*** TODO [0/1] port 5 : vm query
**** TODO query op 10 | implement environment variables
http://www.freepascal.org/docs-html/rtl/sysutils/getenvironmentvariable.html
*** TODO [0/8] port 6 : canvas
**** TODO [#A] figure out the basic sdl / aggpas / ptckvm pipeline.
- https://github.com/badsector/ptckvm
- http://www.freepascal-meets-sdl.net/

**** TODO canvas op  1 | n-    | set color for drawing operations
**** TODO canvas op  2 | xy-   | draw a pixel at coordinates x, y
**** TODO canvas op  3 | xyhw- | rectangle
**** TODO canvas op  4 | xyhw- | filled rect
**** TODO canvas op  5 | xyh-  | draw a vertical line of height (h) starting at x, y
**** TODO canvas op  6 | xyw-  | draw a horizontal line of width (w) starting at x, y
**** TODO canvas op  7 | xyw-  | draw a circle of width (w) starting at x, y
**** TODO canvas op  8 | xyw-  | draw a filled circle of width (w) starting at x, y
*** TODO [0/2] port 7 : mouse
**** TODO mouse op 1 | push mx, push my
**** TODO mouse op 2 | push mb ( button state : 1 bit per button )
*** DONE port 8 : enhanced text output

** TODO [0/12] exercise vm with more ngaro assembly programs
*** TODO hello  : show the word hello                         :demo:
*** TODO square : draw a square                               :demo:
*** TODO color  : draw the palette                            :demo:
*** TODO click  : click screen to change color                :demo:
*** TODO keys   : press any key to change color               :demo:term:
*** TODO caps   : letters on screen (uppercase)               :demo:
*** TODO shift  : captital letters / shift key                :demo:
*** TODO color  : colored text input                          :demo:term:
*** TODO read   : read a file from disk                       :demo:io:
*** TODO write  : write a file to disk                        :demo:io:
*** TODO implement mastermind game                            :demo:big:
*** TODO port mineswpr from retro                             :demo:big:
** WANT standalone org-babel-tangle (preferably native)        :tool:
** WANT relational database (b4 has tiny relational database)
*** [#C] [[http://en.wikipedia.org/wiki/B-tree][b-tree]] or [[http://en.wikipedia.org/wiki/B%2B_tree][b+-tree]] implementation                     :database:
*** [#A] codd's 8 relational operators                        :database:

There is psuedocode for all 8 here:

http://science.kennesaw.edu/~mguimara/3310/RA_SQL.htm

** WANT port of gestalt/gamesketchlib to b4

I made the java/processing game library at https://github.com/tangentstorm/gamesketchlib
and will try to follow the same design patterns as I work on this system.

godot 4 version: https://github.com/tangentstorm/fnarbmlyx

(there is a javsacript version of this as well but it's currently in a private repo)

** WANT midi/modfile player.

I would really really like a modfile player for retro sounds and music. (don't know what modfiles are? see http://modarchive.org/ )

#+begin_quote me

[13:04] <dom96> I always wanted to compete in Ludum Dare. Sadly, nowadays there isn't enough time.
[13:05] <tangentstorm> http://web.archive.org/web/20080704164939/http://turcanator.tangentcode.com/
[13:05] <tangentstorm> this is a midi sequencer i wrote in pygame... i would love it if someone took that and turned it into the music engine for this system.
[13:06] <tangentstorm> not the graphics part... but the time/synchronization code for the music events
[13:07] <tangentstorm> to make something like this: http://www.photonstorm.com/flod

#+end_quote

** IDEA ramdisk / image layout
*** things that need to be in ram somewhere early:
**** the first 256 cells are reserved for registers
**** they also leave room for 256 ngaro-style opcodes
***** (these may be device-specific opcodes, too)
**** first eight bytes should be magic # : utf-16 for the four corners
***** TODO lookup the code points
***** the bios needs to fit in the next 512 bytes
**** map disk pages to ram (probably 4k blocks)
***** maybe give blocks a negative number to indicate system/hardware?
***** this makes sense, as we may have multiple machines in one image
***** btree for where things are laid out in memory
**** maybe a version number / hash for the interpreter config?
**** primary console video ram
**** the basic 256-character font (codepoints + 16 bytes)
**** the registers / stack for each machine
*** paging system
**** ngaro wants ram to be laid out in a specific way
**** the paging system would emulate contiguous ram
**** basically just like the processor does

** IDEA module names (is this still useful?)
*** module io : high level input/output abstraction
**** module io_nw - network
**** module iokb - keyboard
**** module iohd - hard drive
**** module ioss - sound system
**** module iovm - interface to the vm itself
**** module ioip - interprocess communication
*** module vm : the virtual machine
*** module vt : virtual terminal
*** module ui : text widgets
*** module sg : scenegraph
** IDEA posix-friendly "block storage" files

Forth systems tend to use "blocks" instead of "files"
- simplifies editors (no scrolling, just edit screen)

I made a lil/decker tool to browse old block files.
- [ ] find the url?

Idea to make block format that's readable with modern tools:
- force 64-char lines with lf
- extra lf or ---- line every 64 lines
- loader would just ignore those lines
- saver would always add those lines
- use a blkfmt file to enforce/repair the format
