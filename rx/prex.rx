( prex : parsing and regular expressions )
( prototype for b4 edition in retro 10 )
needs ng' with ng'  ( ngaro assembler )

( b4 translations )
: wb ! ; "write a single byte (TODO: currently writes one cell)" :doc
: rm @ ;
: j0, lit, 0 , =jump, ;  ( ngaro doesn't have j0 so simulate )
: du dup ;
: sw swap ;
: ov ;

( b4 macros, adapted from forth.rx words )
: !i ;               immediate "b4a IF macro" :doc
: !t j0, here 0 , ;  immediate "b4a THEN macro" :doc
: !z ( a- ) here sw ! ;     immediate "b4a ENDIF macro" :doc ( fill address for previous jump )
: !e jump, here 0 , sw ` !z ; immediate "b4a ELSE macro" :doc

: !w ( -a ) here ; immediate
: !d ( a-aA ) ` !t ; immediate  ( compile jump template )
: !o ( aA- )  sw jump, , ( jump back to !w ) ` !z ; ( fill in jump to end )

: dr  ( n-  ) push, ; compile-only
: rd  (  -n ) pop,  ; compile-only

( b4 / retro edition )

0 variable: mb "prex: match bit"    :doc
0 variable: ib "prex: input buffer" :doc
0 variable: il "prex: input length" :doc
0 variable: ix "prex: input index"  :doc

( 'microcode' )

: bit 0 != 1 and ; "collapse number to a single bit" :doc
: O 0 mb ! ; "prex: set mb to 0" :doc
: I 1 mb ! ; "prex: set mb to 1" :doc
: mb!! bit du mb ! ; "prex: set and return match bit (as '1' not '-1')" :doc
: mb? mb @ ;
: ch ib @ ix @ + @ ; "prex: current char" :doc
: fw ( n- ) ix @ + ix ! ; "prex: move ix fwd n chars" :doc
: nx ix du @ 1+ sw ! ; ( inc  ix )
  "read one char and copy it to char buffer" :doc

: s-eq? ( ss-b ) compare bit ;

( https://www.bradrodriguez.com/papers/bnfparse.htm )
( : || IF R> DROP 1 THEN ; )

: | !i mb? !t pop drop !e I !z ; ( alt: exit *caller* if mb=1 else set mb=1 for next alt )

( simple patterns )
( seq is just a function / quotation )
( alt is the '|' word above )


: nil ; ( since mb = 1 by default, and we don't modify 0, there's nothing to do )

: chr ( c- ) mb? [ ch = mb!! fw ] [ drop ] if ;  ( retro style )
: chr ( c- ) !i mb? !t ch = mb!! fw !e drop !z ; ( b4 style )

: any mb? [ 1 fw I ] [ ] if  ; ( match any character, todo: <unless end of input> )

: lit ( s- ) mb? [ ] [ drop ] if ; ( todo - match a string )
: rng ( s- ) mb? [ ] [ drop ] if ; ( todo - match any character in a range )
: chs ( s- ) mb? [ ] [ drop ] if ; ( todo - match any character in a set )

( combinators )
: opt ( a- ) mb? [ do | ] [ drop ] if ;
: neg ( a- ) mb? [ do mb? 1 xor mb ! ] [ drop ]  if ;
: end [ any ] neg ;

: run? ( a-f ) do mb? ;

: twice ( a- )
  !i mb? !t
    !i du run? !t du run?
    !e O !z  ( no first match )
  !z drop ;     ( drop the address )

( the retro version just got confusing for me : )
( : rep  mb? [ du run? [ [ du run? ] while ] ] [ O ] if ] [ ] if drop ; )

: rep ( a- )
  !i mb? !t
    !i du run? !t
      [ du run? ] while I
(      !w du run? !d !o I ) ( !! doesn't work yet )
    !e O !z  ( no first match )
  !z drop ;     ( drop the address )

: orp ( a- ) mb? [ rep | ] [ drop ] if ;


without ( ng' )

: ix? ix @ ;

( setup )
"hello, world" constant hw
"banana" constant b
"(a (b 'c (d e)))" constant s

: s0 0 ib ! 0 ix ! I ;
: on ( a - ) s0 ib ! ;


( test junk )

: + rep ;
: ? opt ;
: * orp ;
: h 'h chr ;
: e 'e chr ;
: l 'l chr ;
: h? ` h opt ;
: e? [ 'e chr ] opt ;
: x? [ 'x chr ] ? ;
: h0 'h chr 'e chr 'l chr 'l chr 'o chr ;
: h0 [ 'X chr ] opt 'h chr 'e chr [ 'l chr ] rep 'o chr ;
: h0 x? h e [ l ] + 'o chr ;
hw on h0 mb? drop
