# pre: parsing and regular expressions
# inspired by
# https://tinlizzie.org/VPRIPapers/tr2008003_experimenting.pdf
# https://www.bradrodriguez.com/papers/bnfparse.htm

# -- these two copied from bios
:ch @K rb rt                    # current character
:nc @K c1 ad du !K rb rt        # next character
# -- end bios copy
:ev dc rt                       # ev: eval quotation

:pre @S !K n1 !M rt             # set k=s, m=-1
:fw @K ad !K rt                 # (n-) inc ^K by n

:m0 c0 !M rt   :m1 n1 !M rt     # m0/m1 set match bit
:ln @K @S sb rt                 # ln(-n) match length
:m\  @M nt .i       cd zp .t rt # like m! but no arg to zap
:m!  @M nt .i    zp cd zp .t rt # zap arg + exit if m0 (common case)
:m!! @M nt .i zp zp cd zp .t rt # zap 2 args + exit if m0

:k( @K rt                       # save @K on data stack
:k) @M .i zp .e !K .t rt        # drop or restore saved @K

:m| @M .i zp cd zp              # m|(k-?k) alt guard (zap old k if match)
       .e du !K m1 .t rt        # must use btween k( .. k)

:chr m! ch eq du !M             # (c-) match char, @K++
   .i c1 +K zp .t rt

:lte m! c1 ad ch sw lt !M rt    # (x-) match if ch<=arg, consume nothing
:gte m! ch sw lt nt !M rt       # (x-) match if ch>=arg, consume nothing
:mf1 m\ c1 fw rt                # move forward 1 char if match

:s> c1 +S rb rt                 # inc s and read byte
:brkf cd cd zp c0 dc dc rt      # break .f loop (set ctr=0)

:chs m! @S dc !S m0             # chs(s-) match any char in s
   s> .f s> ch eq .i            # if any char matches:
      m1 nc zp brkf .t          #    match it and break
   .n cd !S rt

:lit m! @S dc !S                # lit(s-) match all chars in s
   k( s> .f                     # (s-Kc) for length of str
      ch s> eq nt               # if any char DOESN'T match:
      .i m0 brkf                #    fail and break
      .e nc zp .t
   .n cd !S k) rt

:rep m! du ev                   # rep(p-) regex '+'
   @M .i                        # if the pattern matches, then:
      .w du ev @M .d .o m1      #    repeat til it doesn't (but keep m1)
   .t zp rt

:opt m! ev m1 rt                # opt(p-) regex '?'
:orp m! rep m1 rt               # orp(p-) regex '*'

# -- matcher for uppercase hex

:btw m!! lte gte mf1 rt          # btw(lh-) match if l<=arg<=h
:digit lb '0 lb '9 btw rt        # matches 0..9
:hexit lb 'A lb 'F btw rt        # matches A..F
:lc @K c1 sb rb rt               # (xy-c) last matched char

:n< m! @N lb 10 ml ad !N rt      # n<(x-n) if match, n*=10 n+=x

:hexn  m!                        # if match, N += hex digit
   k( digit
      lc lb '0 sb          n<
   m| hexit
      lc lb 'A sb lb 0A ad n<
   k) rt
:mhex  m! c0 !N                 # match a hex number. @N is value
   k( .[ lb '- chr rt .] opt
      li `hexn rep
   k) rt

# TODO: move whitespace stuff upward
:ws m\ lb '  lte mf1 rt
:ws~ m\ lb '! gte mf1 rt
:ws* m\ li `ws orp rt
:not @M nt !M rt
:any m\ m1 fw rt
