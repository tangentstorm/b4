# b4s : symbolic processing

# allocate some space for cells
# note this is probably far ahead in memory and there is nothing
# to prevent the assembler from writing over it.

# TODO: the assembler needs :|8 to allign and :+<size> to allocate

:fst^ 00 C0 .. ..   :end^ 00 E0 .. ..   # addrs: start & just past end of cells
:nil^ .. .. .. ..   :nxt^ .. .. .. ..   # addrs: nil and next free cell
:numc .. .. .. ..                       # total number of cells. 'inic' makes this

:ctyp lb 06 an rt                       # ctyp: (c-t) return the cell's type code
:wipe lb 06 nt an rt                    # wipe: (c-c) remove type code
:ntag wipe c2 xr rt                     # ntag: tag cell as number
:stag wipe c4 xr rt                     # ntag: tag cell as symbol
:sym? ctyp c4 eq rt                     # sym?: (c-?)
:num? ctyp c2 eq rt                     # num?: (c-?)
:lis? ctyp c0 eq rt                     # lis?: (c-?)

:car  wipe ri rt :cdr  wipe c4 ad ri rt # get car, cdr (c - c)
:car! wipe wi rt :cdr! wipe c4 ad wi rt # set car, cdr (x c -)
:nil @nil^ rt    :nil? @nil^ eq rt      # push / test nil

:inic                                   # init cells (by making a linked list)
   @end^ @fst^ sb lb 08 dv c1 sb !numc  # numc := number of cells (leave 1 at end for nil)
   @fst^ !nxt^                          # point nxt^ at first free cell
   @end^ lb 08 sb !nil^                 # nil^ := last cell
   @nil^ du du du car! cdr!             # nil := (nil . nil)
   @A dc @fst^ !A                       # A := first cell
   @numc .f                             # for each real cell (non-nil)
      lb 08 +A @A sw wi .n              # link it to the next cell (last -> nil)
   cd !A rt

:celn du nil?                           # (c-n) cell number (for testing without fixed addrs)
   .i zp n1                             # nil = -1
   .e @fst^ sb lb 8 dv .t rt            # otherwise find offset and div by 8

:nxtc @nxt^ du ri !nxt^ rt              # (-c) claim next free cell
:cons nxtc sw ov cdr! sw ov car! rt     # (ad-c) construct cell with car:a cdr:d
:encl nil sw cons rt                    # encl: (-c) enclose a b4 value in a cell (nil . x)


# --- numbers --------------------------
:cnum encl ntag rt                      # cnum: (n-c) construct b4s number from raw b4 [n-nc-cn-cnc]
:pnum cdr putn rt                       # pnum: (c- ) print b4s number

# --- symbols --------------------------
:glu lb 03 .f lb 08 sh ad .n rt         # glu: (abcd-4) glue up to 4 chars together. ex: 'a 'b 'c 0 m4c
:o4c c4 .f                              # o4c: (4-) output a 4-char symbol. loop 4 times:
     du lb FF an du .i ^O .e zp .t      #   loop and print non-0 char
     ls -8 sh .n zp rt                  #   then shift over one char
:csym encl stag rt                      # csym: (4-c) construct symbol from 4-char
:psym cdr o4c rt                        # psym: (c- ) print symbol

# --- lists and values -----------------

:ptl du nil? .i zp rt                   # (c-) helper for plis. if nil, we're at the end, so stop.
  .e sp du ctyp                         # else emit space, then either '. x' or 'x'
     .i lb '. ^O sp cl >pval rt         # ctyp=="atom?" if so, dotted pair.
     .e du car cl >pval                 # else print the car and recurse on cdr
        cdr jm `ptl .t .t               # optimized tail call (no 'rt')

:wrp? dc car du sym?                    # (xs-?) is x a wrapped with symbol s?
   .i cdr cd eq
   .e zp cd zp c0 .t rt

:symw csym sw cons rt                   # wrap with symbol
:wquo li 'q 'u 'o .. symw rt
:wqup li 'q 'u 'p .. symw rt
:wqdn li 'q 'd 'n .. symw rt

:quo? li 'q 'u 'o .. wrp? rt            # (x-?) is x a quoted value?
:qdn? li 'q 'd 'n .. wrp? rt
:qup? li 'q 'u 'p .. wrp? rt
:pfix ^O cdr cl >pval rt

:plis                                   # (c-) print a list
  du quo? .i lb '' pfix rt .t
  du qdn? .i lb ', pfix rt .t
  du qup? .i lb '` pfix rt .t
  lb '( ^O
  du nil? nt .i
     du car cl >pval
     cdr ptl
  .t lb ') ^O rt

:pval du ctyp                           # (c-) print any cell
   du c4 eq .i zp psym rt .t
   du c2 eq .i zp pnum rt .t
   zp plis rt


#-- list building ---------------------

:newc nil nil cons rt
:node @L newc du !L du !P du !Q rt      # node :: (-o) @LPQ=new cell. keep old L on stack
:acq! @Q car!                           # acq! :: (c-) add cell to list whose tail is in @Q
   @Q !P newc !Q                        #    (c-c) last cell @L is (nil). P=L, L=new
   @Q @P cdr! rt                        #    (c-c) set last cell's cdr to new cell
:done @Q @L eq                          # done :: (o-L) : cap @L, leave on stack, restore old @L
   .i nil !L
   .e @Q cdr @P cdr! .t
   @L sw !L rt


#-- reader -----------------------------

:ch< lb 18 sh @N ls -8 sh ad !N rt      # ch< :: (c-n) append char to symbol @N. lossy if >4 chars
:smch m\                                # smch ::(-) match valid symbol chars
   .[ ."()'`," .] chs not
   lb 20 lb 7F btw
   @M .i lc ch< .t rt
:msym m\ c0 !N                          # msym :: (-) match a symbol, store in @N
   .[ li `smch rep rt .] try rt

:rlis m\ node                           # rlis :: m?(-):(-l) read a list if matching
   .[ .[ ws* cl >rval
         .i acq! .t rt .] orp
      # .[  lb '. chr ws* cl >rval
      #     m\ @L cdr! rt .] opt
      ws* lb ') chr rt
   .] done rt

:rval m\ ws*                             # rval :: m?(-):(-c?)
   .[ lb '( chr rlis
   m| lb '' chr @M .i rval .i wquo .t .t
   m| mhex @M .i @N cnum .t
   m| msym @M .i @N csym .t
   # m| lb '` chr rval .i wqup .t
   # m| lb ', chr rval .i wqdn .t
   # m|
   rt
   .] try @M rt


#-- list navigation ---------------------

:cdar cdr car rt
:cddr cdr cdr rt
:ntl .w du lis?                         # (l-c) next to last cell of list
   ov cdr lis? an
   ov cddr nil? nt an .d cdr .o rt
