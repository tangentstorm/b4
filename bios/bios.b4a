# note: bios.b4a is generated from bios.b4a.org
# I'm keeping it in version control until I have
# a decent command-line build step for tangling
# the org file, because the pascal code requires it.

#--- begin bios -------------------\
:tg lb 'g tm rt # (xy-) goto xy
:ta lb 'a tm rt # (a-) set terminal attribute ((fg << 4) + bg))
:E :tw lb 'e tm rt # write (emit) char
:tr lb 'r tm rt # readkey
:tk lb 'k tm rt # keypressed?
:ts lb 's tm rt # clear screen
:tl lb 'l tm rt # clear line
:tc lb 'p tm rt # (-xy) fetch cursor position

:X dc rt             # (f-?) execute f by pushing to ctrl stack and "returning"
:nz? lb 00 eq nt rt                 # (x-0|1) was x non-zero?

.^ 04 'e'-'n'm
  :e-nm lb 04 ad rt                  # (e-s) address of name relative to entry
.^ 04 'e'-'x't
  :e-xt e-nm du rb lb 01 ad ad rt        # (e-a) address of code for entry "execution token"

.^ 03 'i'n'c
  :inc  lb 01 ad rt
.^ 03 'd'e'c
  :dec  lb 01 sb rt
.^ 04 'f'i'n'd
  :find                               # (s - 0|e) find s in dictionary
  @T dc !T @^                       # (s - e :-T)
  .w du nz? .d                      # (se - se?)  while e!=0 do:
     du e-nm @T ^Q                  # (see -sen) fetch name, test condition ^Q
        .i cd !T rt .t              #          return if matched
     ri .o                          # (e - e') otherwise, move on to next entry
  cd !T rt                          # (0) e=0 so return it as fail result
.^ 04 's'-'e'q
  :s-eq? ^Q rt                        # (st-?) are strings s and t the same?

:s-eq?-main                         # -- python translation:
   @S @T eq .i                      # if s is t:
      lb 01 rt .t                   #    return 1
   c1 +S rb @T rb eq .i             # if len(s) == len(t):
      c1 +T rb .f                   #    for s,t
         c1 +S rb c1 +T rb          #    in zip(s,t):
         eq nt .i                   #       if s!=t:
            c0 rt .t .n             #          return 0
   .e c0 rt .t                      # else: return 0
   c1 rt                            # return 1

# !! This is experiment in style. I plan to make a nice syntax
#    for this register capture/restore behavior.
:Q @T dc !T                         # capture arg T
      @S dc !S                      # capture arg S
         s-eq?-main
      cd !S                         # restore S
   cd !T                            # restore T
   rt

.^ 04 'e'x'e'c
  :exec e-xt dc rt

  
:dvm  # n d
  ov ov md      # (xy-xy|m)
  dc dv cd rt   # (xy|m-dm|)

:between?                          # (x hi lo - x f)
  du dc lt nt                      # (x <=hi? |lo)  (x<=y is -.(y>x))
  ov cd sw lt nt an rt             # (x f)

:n1 lb 00 nt rt                    # TODO: better way to write "-1"

  :sp lb 20 ^E rt                    # emit space
:nl lb 0A ^E lb 0D ^E rt           # emit CRLF
.^ 03 'b'y'e
  :bye nl lb 01 ta                   # red
  lb 'e tw lb 'n tw lb 'd tw       # echo 'end'
  nl hl
  :b4>
  nl lb 02 ta                      # green on black
  lb 'b tw lb '4 tw lb '> tw       # echo 'b4>'
  sp lb 07 ta                      # gray on black for user input.
 rt
.^ 04 'e'm'i't
  
.^ 04 'p'u't's
  :puts @S dc !S                     # given address of counted string s, write s
  c1 +S rb .f c1 +S rb ^E .n
  cd !S rt

:words$ .^ 05 'w'o'r'd's
  :words @^                          # list known words, starting at last entry.
  .w du nz? .d                     # while address != 0
     du e-nm puts sp               # print the word followed by a space
     ri .o                         # move to next entry
  zp rt                            # drop the final null pointer
  :unkno-s 0D 'u'n'k'n'o'w'n' 'w'o'r'd'.
:unknown
  lb 08 ta sp li `unkno-s puts nl rt
  # reading/writing numbers

:base 10 :digit  '0'1'2'3'4'5'6'7'8'9'A'B'C'D'E'F
.^ 04 'p'u't'n
  :putn # (n - )
  hx rt
  du lb 00 eq .i lb '0 tw rt
  .e lb 00 sw                      # ( n-kn) k:digit count=0
     .w du lb 00 eq nt .d          # while n!=0 do
        li `base rb dvm            # (kn-kdm) divmod
        li `digit ad rb dc         # (kdm-kd|c) push char to retn stack
        sw inc sw .o               # k++, d is new n
      zp                           # (kd-k)
      .f cd cd tw dc .n .t         # loop through the characters
  rt

  :digit?                            # (c-d1) or (c-0)
 du lb '0 lb '9 between? .i
    zp lb '0 sb n1
 .e zp lb 00 .t
 rt

:try-num                           # (s-n) try to parse string as number
  du rb dc                         # (s    - s|i) a=addr of string
  lb 00                            # (s|i  - sr|i) r=0
  cd .f dc inc du rb               # (ar|i - ac|ri) a=addr of char, c=char
     digit? .i
        cd lb 0A ml ad dc          #  r= r*10+d
     .e unknown
        zp cd zp cd zp rt .t       # drop result and return
     cd                            # (p|ri - pr|i) so next can do its thing
  .n
  sw zp rt                         # (pr-r)


:B 00 # length byte, plus 64-byte buffer
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

:eol 01                            # end of line flag
:eol? li `eol rb rt
:eol0 lb 00 li `eol wb rt
:eol1 lb 01 li `eol wb rt

:ctrl? lb 20 lt rt

:on-space tw # (20 - )
   eol1
   @B find
   du nz?
      .i exec
      .e try-num .t
   rt

:@ :on-ascii              # can't call ^@ directly. 00=no-op
   du tw c1 +C wb
   @B rb inc @B wb
   rt

:D bye       # exit on ^D
:G db rt     # debug on ^G

# :H # ^H is backspace

:on-ctrl
   lb 04 ml ri du nz?
      .i dc rt
      .e zp rt .t

:on-key
   du lb 20 eq
      .i on-space rt
      .e du ctrl?
         .i on-ctrl rt       # register dispatch for ctrl keys
         .e on-ascii rt .t .t
   rt

:repl
   .w lb 01 .d
      eol?
      .i eol0 lb 00 @B wb @B inc !C b4> .t  # show prompt if new line
      tr on-key                     # read char from terminal
   .o

#--- end of bios ------------------/
'- '- '- 'e 'n 'd '- 'o 'f '- 'b 'i 'o 's '- '- '-
:\ # start of execution.
# show word list and enter repl.
lb 0E ta
li `words$ e-nm puts lb ': tw sp lb 07 ta words nl
repl
