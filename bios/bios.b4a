# -- bios.b4a : basic input/output system + utilities
#
# This is a bios for B4 instances. A b4 instance does
# *not* need to use this bios, but this is the usual
# setup for interactive use.
#
# -- memory layout ---------------------------------------------
#
#    first 256 bytes are common to all b4 instances:
# 0000..007F 32 named registers (4 bytes each)
# 0080..00FF 32 system variables (defined here)
#
#    conventions used by the bios:
# 0100..04FF 64x16 default character buffer (screen text)
# 0500..09FF 64x16 default attribute buffer (screen colors)
# 0A00..0AFF 256-byte string input buffer (inc 1 len byte)
# 0B00..0B3F 64 byte config block
# 0B40..FFFF programmable memory
# --------------------------------------------------------------

:0000 40 0B .. ..       # set @@ to specify where ip starts


# -- system registers ------------------------------------------
:0080  # RMZ = $20; {memory size}
:0084  # RIP = $21; {instruction pointer}
:0088  # RDA = $22; {ds address}
:008C  # RDS = $23; {ds height}
:0090  # RDZ = $24; {ds size (max height)}
:0094  # RCA = $25; {cs address}
:0098  # RCS = $26; {cs height}
:009C  # RCZ = $27; {cs size (max height)}
:00A0  # RST = $28; {state flag}
:00A4  # RDB = $29; {debug flag}
:00A8  # RED = $2A; {used by the debugger's editor}
:00AC  # RBP = $2B; {internal breakpoint}
:00B0  # $2C
:00B4  # $2D
:00B8  # $2E
:00BC  # $2F
:00C0  # $30
:00C4  # $31
:00C8  # $32
:00CC  # $33
:00D0  # $34
:00D4  # $35
:00D8  # $36
:00DC  # $37
:00E0  # $38
:00E4  # $39
:00E8  # $3A
:00EC  # $3B
:00F0 :tmb 00 01 .. ..        # $3C raddress of terminal buffer
:00F4 :tmw 40 .. .. ..        # $3D terminal width
:00F8 :tmh 10 .. .. ..        # $3E terminal height
:00FC :cur 00 00 .. ..        # $3F cursor position (8 bits each x y)


:0100 # --- video memory (splash screen) ------------------------

"                                                                " # 0
"  +-----------------+                                           " # 1
"  |                 |                                           " # 2
"  |  ::         ::  |                                           " # 3
"__|  ::     ::  ::  |___________________________________________" # 4
"__|  ::     ::  ::  |___________________________________________" # 5
"__|  :::::  ::::::  |___________________________________________" # 6
"__|  ::  ::     ::  |___________________________________________" # 7
"  |  :::::      ::  |                                           " # 8
"  |                 |                                           " # 9
"  +-----------------+                                           " # A
"                                                                " # B
"                                                                " # C
"                                                                " # D
"                                                                " # E
"                                                                " # F

:0500 # -- colors --

# line 0
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line 1
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09

# line 2
09 09 09 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F
0F 0F 0F 0F 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09

# line 3
07 07 09 0F 0F 30 30 0F 0F 0F 0F 0F 0F 0F 0F 0F
20 20 0F 0F 09 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07


# line 4
08 08 09 0F 0F 30 30 0F 0F 0F 0F 0F 20 20 0F 0F
20 20 0F 0F 09 08 08 08 08 08 08 08 08 08 08 08
08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08
08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08

# line 5
07 07 09 0F 0F 30 30 0F 0F 0F 0F 0F 20 20 0F 0F
20 20 0F 0F 09 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line 6
03 03 09 0F 0F 30 30 30 30 30 0F 0F 20 20 20 20
20 20 0F 0F 09 03 03 03 03 03 03 03 03 03 03 03
03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03
03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03

# line 7
02 02 09 0F 0F 30 30 0F 0F 30 30 0F 0F 0F 0F 0F
20 20 0F 0F 09 02 02 02 02 02 02 02 02 02 02 02
02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02
02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02


# line 8
07 07 09 0F 0F 30 30 30 30 30 0F 0F 0F 0F 0F 0F
28 28 0F 0F 09 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line 9
09 09 09 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F
0F 0F 0F 0F 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09

# line A
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09
09 09 09 09 09 09 09 09 09 09 09 09 09 09 09 09

# line B
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07


# line C
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line D
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line E
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07

# line F
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07
07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07


:0A00 :inb^ :K          # input buffer

:0B00                   # config block

:0B40                   # start of code

jm >main                # pointer to main (to be defined by user code)
jm 40 0B .. ..          # loop if main is not defined

# -- general memory routines ----------------------------------

:ng c0 sw sb rt         # (n--n) negate
:hi ls -8 sh            # (n-x) return bits 8-F of n (FALLS THROUGH)
:lo lb FF an rt         # (n-x) return bits 0-7 of n

:mfil                   # (fna-) fill n ints with f, starting at a
   @A dc !A .f          # (-f|n)  for n := n downto 0
      du c4 +A wi       # (-i|n) copy f to mem[@A] and increment @A
   .n zp cd !A rt       # (-|)  restore old @A and clear stack


# -- terminal buffer ------------------------------------------

:cury @cur hi rt        # (-y) cursor y position
:curx @cur lo rt        # (-x) cursor x position
:go00 c0 !cur rt
:goxy li `cur sw ov     # (x y -)
   c1 ad wb wb rt

:cscr
   @tmw @tmh ml c4 dv   # (-n) number chars on screen/4 = num ints
   li '  '  '  '        # (-nf) fill pattern for text
   ov @tmb mfil         # (-n) fill tmb with pattern
   li 07 07 07 07 sw    # (-fn) fill pattern for attrs
   du c4 ml @tmb ad     # (-fna) address of text attrs
   mfil go00 rt         # (-) clear bg, reset cursor, return


:wrap                  # ( - ) wrap cursor if x >= width
   curx @tmw lt nt     # ( - f) x >: width?
   .i c0 cury c1 ad    # ( - 0 y' ) ifso, x=0, y+=1
      du @tmh lt nt    # ( - 0 y' f) y >: height?
      .i zp c0 .t      # ( - 0 0 ) ifso, y=0
      goxy             # ( - ) update cursor with new x,y
   .t rt

:O                      # assign ^O to output one char
:emit @tmb              # (c-) emits character at current position
   cury @tmw ml ad
   curx ad wb
   @cur c1 ad !cur
   wrap rt

:nl c0 cury c1 ad goxy rt
:sp lb '  ^O rt
:maxx @tmw c1 sb rt
:maxy @tmh c1 sb rt

:\0 # debug assist: print first line of screen using the 'io' op
   @X dc @tmb !X
   @tmw .f c1 +X rb lb 'e io .n
   cd !X rt


#-- data printers ---------------------------------------------

:puts @S dc !S         # output counted string from address s
   c1 +S rb .f c1 +S rb ^O .n
   cd !S rt

:base 10 :digits  '0'1'2'3'4'5'6'7'8'9'A'B'C'D'E'F

:dvm ov ov md dc dv cd rt           # (x y - q r) divmod

:putn                               # (n - ) print n using current base
   du c0 eq                         # if n=0
   .i zp lb '0 ^O rt .t             # then just print 0 and return
   du c0 lt                         # negative?
   .i lb '- ^O c0 sw sb .t          # ifso emit '-' and flip sign
   c0 sw                            # else count digits. start with k=0 (n-kn)
   .w du .d                         # while n!=0 do
      li `base rb dvm               # (kn-kqr) divmod
      li `digits ad rb dc           # (kqr-kq|c) push digits[r] char to ctrl stack
      sw c1 ad sw .o                # (kq-Kn|c) k++, n=q
   zp                               # (kn-k|k$c) k copies of c are now on stack
   .f cd cd ^O dc .n                # (|ic-ic|) loop through chars. (have to pop/push loop counter)
   rt

#-- tokenizer -------------------------------------------------

:inb `inb^                          # @inb is the input buffer address
:ch @K rb rt                        # current character
:nc @K c1 ad du !K rb rt            # next character
:la @K ad rb rt                     # look ahead n chars
:k0 @inb !K rt                      # set K back to start
