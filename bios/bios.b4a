# -- bios/term: terminal

# -- general memory routines ----------------------------------

:ng c0 sw sb rt         # (n--n) negate
:hi ls -8 sh            # (n-x) return bits 8-F of n (FALLS THROUGH)
:lo lb FF an rt         # (n-x) return bits 0-7 of n

:mfil # (xna-) fill memory: set n ints to x, starting at address a
   @A dc !A .f          # (ina-i|na)  for n := n downto 0
      du c4 +A wi       # (i|na-i|na) copy x to @A and increment @A
   .n zp cd !A rt       # (i|n-|)  restore old @A and clear stack


# -- terminal buffer ------------------------------------------

:tmb 00 06 00 00        # address of terminal buffer
:tmw 40 .. .. ..        # terminal width
:tmh 10 .. .. ..        # terminal height
:cur 00 00 .. ..        # cursor position (8 bits each x y)


:cscr
   li '  '  '  '        # fill pattern
   @tmw @tmh ml         # number chars on screen
   c4 dv                # divide by 4 to get num of ints
   @tmb mfil rt         # fill screen with pattern


:cury @cur hi rt        # (-y) cursor y position
:curx @cur lo rt        # (-x) cursor x position
:go00 c0 !cur rt
:goxy li `cur sw ov     # (x y -)
   c1 ad wb wb rt

:wrap                  # ( - ) wrap cursor if x >= width
   curx @tmw lt nt     # ( - f) x >: width?
   .i c0 cury c1 ad    # ( - 0 y' ) ifso, x=0, y+=1
      du @tmh lt nt    # ( - 0 y' f) y >: height?
      .i zp c0 .t      # ( - 0 0 ) ifso, y=0
      goxy             # ( - ) update cursor with new x,y
   .t rt

:O                      # assign ^O to output one char
:emit @tmb              # (c-) emits character at current position
   cury @tmw ml ad
   curx ad wb
   @cur c1 ad !cur
   wrap rt

:nl c0 cury c1 ad goxy rt
:sp lb '  ^O rt
:maxx @tmw c1 sb rt
:maxy @tmh c1 sb rt

:\0 # debug assist: print first line of screen using the 'io' op
   @X dc @tmb !X
   @tmw .f c1 +X rb lb 'e io .n
   cd !X rt


#-- data printers ---------------------------------------------

:puts @S dc !S         # output counted string from address s
   c1 +S rb .f c1 +S rb ^O .n
   cd !S rt


:base 10 :digits  '0'1'2'3'4'5'6'7'8'9'A'B'C'D'E'F

:dvm ov ov md dc dv cd rt           # (x y - q r) divmod

:putn                               # (n - ) print n using current base
   du c0 eq                         # if n=0
   .i zp lb '0 ^O rt .t             # then just print 0 and return
   du c0 lt                         # negative?
   .i lb '- ^O c0 sw sb .t          # ifso emit '-' and flip sign
   c0 sw                            # else count digits. start with k=0 (n-kn)
   .w du .d                         # while n!=0 do
      li `base rb dvm               # (kn-kqr) divmod
      li `digits ad rb dc           # (kqr-kq|c) push digits[r] char to ctrl stack
      sw c1 ad sw .o                # (kq-Kn|c) k++, n=q
   zp                               # (kn-k|k$c) k copies of c are now on stack
   .f cd cd ^O dc .n                # (|ic-ic|) loop through chars. (have to pop/push loop counter)
   rt

#-- tokenizer -------------------------------------------------

:K    # K register points to start or next character
:inb^ # a counted string (length byte + up to 255 chars)
# +0 +1 +2 +3 +4 +5 +6 +7 +8 +9 +A +B +C +D +E +F
  00 .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 0
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 1
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 2
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 3
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 4
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 5
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 6
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 7
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 8
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 9
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # A
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # B
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # C
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # D
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # E
  .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # F
:inb `inb^                          # @inb is the input buffer address
:ch @K rb rt                        # current character
:nc @K c1 ad du !K rb rt            # next character
:la @K ad rb rt                     # look ahead n chars
:k0 lb `inb^ !K rt                  # set K back to start
