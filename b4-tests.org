#+title: b4 vm/debugger test suite

* About this file
This is a suite of acceptance tests for the B4 virtual machine.
There are B4 implementations in multiple languages, so this file
helps to make sure they are all compatible and follow the spec.

* Running the tests

This is a slightly messy process at the moment, as test runner is currently in another repository:

https://github.com/tangentstorm/learntris

See the =test-b4-*= scripts in this repository for examples.

* DONE [6/6] debugger interface
** DONE establish a command loop and a way to exit
#+name: io.%q
#+begin_src b4a
> %q
= %q : quit
: The '%q' command instructs b4 to quit.
:
: b4 should not produce any output unless
: explicitly instructed to do so.
#+end_src

** DONE print the data stack
#+name: io.?d
#+begin_src b4a
> ?d %q
ds: [] # should be an empty array
= ?d : query the data stack
#+end_src

** DONE print the call stack
#+name: io.?c
#+begin_src b4a
> ?c %q
cs: [] # should be an empty array
= ?c : query the call stack
#+end_src

** DONE push a hex number to the stack
#+name: io.hex
#+begin_src b4a
> FF CC ?d %q
ds: [FF CC]
= hex numbers are pushed to data stack
: it should print in hex
#+end_src
** DONE push an ascii character onto the stack
#+name: io.ascii
#+begin_src b4a
> 'a 'A ' ?d %q
ds: [61 41 20]
= ascii syntax
: note lack of a second space after the '
: it should print in hex
#+end_src
** DONE push control character addresses to stack
#+name: io.ctrl
#+begin_src b4a
> `@ `A `B `C `X `Y `Z ?d %q
ds: [0 4 8 C 60 64 68]
= control characters
: the 32 ascii control characters act as a dictionary.
: (^@ is written 00 and is a no-op)
: ^@ calls the word whose address is at address 0000
:   (but the actual code emitted is =lb 00 cl= op, as bytecode 0 is a null op)
: ^A calls the word whose address is at address (4 * 1 = 0004)
: ^X calls the word whose address is at address (4 * ord('X')-ord('A') = 5C)
: But if we want handy way to refer to the address, we use `X
#+end_src

#+name: io.ctrl2
#+begin_src b4a
> `[ `\ `] `^ `_ ?d %q
ds: [6C 70 74 78 7C]
= non-alphabetic control characters
: there are 5 control characters after ^Z that use punctuation.
#+end_src
* DONE [17/17] alu / stack operations
** DONE =ad= op
#+name: op.ad
#+begin_src b4a
> 01 02 ad ?d %q
ds: [3]
= ad: add top two items on the stack
: result is pushed back to stack
#+end_src
** DONE =ml= op
#+name: op.ml
#+begin_src b4a
> 03 03 ml ?d %q
ds: [9]
#+end_src
** DONE =sb= op
#+name: io.math
#+begin_src b4a
> 0A 05 sb ?d %q
ds: [5]
#+end_src

** DONE =dv= op
#+name: math.dv
#+begin_src b4a
> 0A 05 dv ?d %q
ds: [2]
#+end_src
** DONE =md= op
#+name: math.md
#+begin_src b4a
> 0A 05 md ?d
ds: [0]
> zp 0A 03 md ?d %q
ds: [1]
#+end_src
** DONE =sh= op
#+name: math.sh
#+begin_src b4a
> 06 01 sh ?d %q
ds: [C]
#+end_src

** DONE =an= op
#+name: math.an
#+begin_src b4a
> 12 35 an ?d %q
ds: [10]
#+end_src

** DONE =or= op
#+name: math.or
#+begin_src b4a
> 12 35 or ?d %q
ds: [37]
#+end_src

** DONE =xr= op
#+name: math.xr
#+begin_src b4a
> 12 35 xr ?d %q
ds: [27]
#+end_src

** DONE =nt= op
#+name: math.nt
#+begin_src b4a
> 12 nt ?d %q
ds: [-13]
#+end_src

** DONE =eq= op
#+name: math.eq
#+begin_src b4a
> AA BB eq CC CC eq ?d %q
ds: [0 -1]
#+end_src

** DONE =lt= op
#+name: op.lt
#+begin_src b4a
> AA BB lt DD CC lt EE EE lt ?d %q
ds: [-1 0 0]
#+end_src

** DONE =du= op
#+name: op.du
#+begin_src b4a
> 0A du ?d %q
ds: [A A]
#+end_src b4a
** DONE =zp= op
#+name: op.zp
#+begin_src b4a
> 0A ?d zp ?d %q
ds: [A]
ds: []
#+end_src
** DONE =sw= op
#+name: io.sw
#+begin_src b4a
> 0A 0B sw ?d %q
ds: [B A]
#+end_src
** DONE =ov= op
#+name: op.ov
#+begin_src b4a
> 0A 0B ov ?d %q
ds: [A B A]
#+end_src
** DONE =cd= and =dc= ops
#+name: op.cd-dc
#+begin_src b4a
> 0A dc ?d ?c
ds: []
cs: [A]
> cd ?d ?c %q
ds: [A]
cs: []
#+end_src

* DONE [2/2] batch memory access from debugger
** DONE inspect ram
#+name: b4i.mem-show
#+begin_src b4a
> ?100 %q
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src
** DONE write to ram
#+name: b4i.mem-write
#+begin_src b4a
> ?100
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
> :100 00 AA BB CC
> ?100 %q
.. AA BB CC .. .. .. .. .. .. .. .. .. .. .. ..
#+end_src

* DONE [2/4] memory operations

** TODO: test that %C clears memory and stacks

** DONE =wi=

=wi= writes a 32-bit integer.

#+name: io.wi
#+begin_src b4a
> %C
> AABBCCDD 0100 wi
> ?100 %q
DD CC BB AA .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src

** TODO =wb=

=wb= writes a single byte:

#+name: io.wb
#+begin_src b4a
> %C
> AABBCCDD 0100 wb
> ?100 %q
DD .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src


** TODO test the display of negative numbers

which of these should it be?

: ds: [CC00BBAA]
: ds: [-33FF4456]

** DONE =rb= op : read a value from address

=rb= reads a byte

#+name: op.rb
#+begin_src b4a
> :100 AA BB 00 77
> ?100
AA BB .. +W .. .. .. .. .. .. .. .. .. .. .. ..
> 0100 ri ?d %q
ds: [7700BBAA]
#+end_src

** =ri= writes a 32-bit integer

#+name: op.ri
#+begin_src b4a
> :100 AA BB CC 00
> ?100
AA BB CC .. .. .. .. .. .. .. .. .. .. .. .. ..
> 0100 ri ?d %q
ds: [CCBBAA]
#+end_src





* TODO registers

** TODO read and write from shell
#+name: op.rr-wr
#+begin_src b4a
> 12345678 !X ?d
ds: []
> @X ?d %q
ds: [12345678]
#+end_src

** TODO read and write while executing

#+name: op.rr-wr.runtime
#+begin_src b4a
  > :100 lb 12 !X @X c1 +X @X
  > %s ?d
  ds: [12]
  > %s ?d ?X
  ds: []
  00000012
  > %s ?d ?X  # @X
  ds: [12]
  00000012
  > %s %s ?d ?X  # c1 +X
  ds: [12 12]
  00000013
  > %s ?d ?X # @X
  ds: [12 12 13]
  00000013
  > %q
#+end_src


** DONE =+x= ops

The "+" ops take a value off the stack and add it to a register,
leaving the original value of the register. You can use this to
treat the register as a cursor through a string or array of values.

#+name: op.plus-x
#+begin_src b4a
> 11223344 !X
> 04 +X 02 +X @X ?d %q
ds: [11223344 11223348 1122334A]
#+end_src

* the constant ops

#+name: op.c0-c1
#+begin_src b4a
  > c0 c1 ?d %q
  ds: [0 1]
#+end_src


* DONE [2/2] debugger/stepper
** DONE query instruction pointer
#+name: dbg.?i
#+begin_src b4a
> ?i %q
ip: 100
= ?i : query instruction pointer
: it should print in hex
#+end_src
** DONE %s step command
#+name: dbg.%s
#+begin_src b4a
> ?i %s ?i %q
ip: 100
ip: 101
= %s : step
: step and execute a no-op
#+end_src
* TODO [1/3] sequences
** DONE =lb= op
#+name: op.lb
#+begin_src b4a
> :100 lb AB
> ?100
lb AB .. .. .. .. .. .. .. .. .. .. .. .. .. ..
> ?d
ds: [] # it should not be on the stack YET
> %s ?d ?i %q
ds: [AB]
ip: 102
= lb: load byte
: lb loads a byte from memory at runtime.
: we never needed it before because our debug shell
: is pushing numbers directly to the stack
#+end_src
** TODO =li= op
#+name: op.li

* TODO [1/8] control flow
** DONE =..= (zero) is no-op
** TODO =hp= hop
Hop is a small relative jump. It takes a signed 8-bit int as a parameter, and can thus move the instruction pointer forward up to 127 bytes, or backwards up to 128 bytes.

*** TODO forward
#+name: op.hp.forward
#+begin_src b4a
> :100 hp 05
> ?i %s ?i %q
ip: 100
ip: 105
#+end_src
*** TODO forward max
#+name: op.hp.forward-max
#+begin_src b4a
> :100 hp 7F
> %s ?i %q
ip: 17F
#+end_src
*** TODO forward wrap
here we set the high bit so it's the same as negative 1.
(but then that puts us at address 00FF, which is too small so we clamp to 0100 and then we have an infinite loop)
#+name: op.hp.forward-wrap
#+begin_src b4a
> :100 hp 80
> %s ?i %q
ip: 100
#+end_src

*** TODO backward
#+name: op.hp.backward
#+begin_src b4a
> :100 .. .. .. hp -3
> %s %s %s ?i %s ?i %q
ip: 103
ip: 100
#+end_src
*** TODO backward (and out of bounds)
#+name: op.hp.backward-oob
#+begin_src b4a
> :100 hp -5
> %s ?i %q
ip: 100
#+end_src
*** TODO zero?
This causes an infinite loop.
#+name: op.hp.zero
#+begin_src b4a
> :100 hp 00
> %s ?i %q
ip: 100
#+end_src
** TODO =h0= hop if 0

=h0= is the same as =hp= but conditional.

It pops a value off the data stack, and only hops if the value is 0.

*** TODO when 0
We push 0 to the stack and then step, so we should jump to address $0123
#+name: op.h0.when0
#+begin_src b4a
> :100 h0 23
> 00 %s ?i %q
ip: 123
#+end_src
*** TODO when 1
Here the hop is not taken, but we still hop over the argument.
#+name: op.h0.when1
#+begin_src b4a
> :100 h0 23
> 01 %s ?i %q
ip: 102
#+end_src

** TODO =jm= jump

=jm= is an unconditional jump to a 4-byte address.

#+name: op.jm
#+begin_src b4a
> :100 jm 78 56 34 12
> %s ?i %q
ip: 12345678
#+end_src

** TODO =cl= call

=cl= is the same as =jm= but also pushes the instruction pointer to the call stack.

Note that the instruction pointer is incremented by 4 first, to skip over the argument.

#+name: op.cl
#+begin_src b4a
> :100 cl 78 56 34 12
> %s ?i ?c %q
ip: 12345678
cs: [104]
#+end_src

** TODO =rt= return

In general, =rt= is used to return control from a called function.

The actual mechanic is a jump to an address popped from the control stack.

To simplify this test, we simply push the address we want to the control stack ourselves.

#+name: op.rt
#+begin_src b4a
> :100 rt
> 1234 dc ?i ?c %s ?i ?c %q
ip: 100
cs: [1234]
ip: 1234
cs: []
#+end_src

** TODO =rt= dynamic call caveat

Here's a small catch for the "dynamic call" technique used in the previous test.

It =only= comes into play when using the "calculator mode".

Note that in the previous test, we used =%s= to trigger a step. This
reads an instruction from ram[ip] and then causes the instruction pointer to increment.

If we had simply invoked =rt= directly using the "calculator", no "step" has occured, and so the address would be off by one.

In general, it probably just doesn't make sense to use contrtol flow ops from the "calculator" outside of testing.

#+name: op.rt.b4i
#+begin_src b4a
> 1234 dc ?i ?c rt ?i ?c %q
ip: 100
cs: [1234]
ip: 1233
cs: []
#+end_src

** TODO =nx= next

This is probably the most complicated operation.

It's intended for loops where you do something a fixed number of times.

An integer counter is stored on the control stack. Every time =nx= is run,
the counter is decremented. A hop is triggered when the result is
/not/ zero, so that the loop continues until the countdown reaches 0.

On the step where it does reach zero, the counter is dropped.

In this test, we loop back to the starting address twice, and then proceed.

#+name: op.nx
#+begin_src b4a
> :100 nx 00
> 2 dc
> ?c ?i
cs: [2]
ip: 100
> %s ?c ?i
cs: [1]
ip: 100
> %s ?c ?i
cs: []
ip: 102
> %s ?c ?i
cs: []
ip: 103
> %q
#+end_src

* TODO =io= op

** 'e for emit

This should emit a single character.

While running in the b4i interpreter, it should buffer the output until the end of line is received.

#+name: op.io.e
#+begin_src b4a
> 'h 'e io 'i 'e io %q
hi
#+end_src

* TODO defining the ctrl registers

#+name: here
#+begin_src b4a
  > ?E                # by default, most registers are blank
  00000000
  > ?_                # but "here" pointer is set to $100=256
  00000100
  > :E lb 'e io rt    # assemble "emit"
  > ?E                # now ^E should be assigned
  00000100
  > ?_ %q             # and ^_ should reflect the 4 bytes we assembled
  00000104
#+end_src


#+name: ctrl.e
#+begin_src b4a
  > :E lb 'e io rt
  > 'o ^E 'k ^E
  ok
  > %q
#+end_src



* TODO host language
* TODO virtual hardware
* TODO [0/2] system ops (how to test these?)
** TODO =db=  triggers the debugger
** TODO =hl=  halts the virtual machine
