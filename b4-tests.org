#+title: b4 vm/debugger test suite

* About this file
This is a suite of acceptance tests for the B4 virtual machine.
There are B4 implementations in multiple languages, so this file
helps to make sure they are all compatible and follow the spec.

* How to read the tests

The important lines in this file are the code sections.

Lines starting with =>= are /input/ to the program.

Lines without =>= are the expected outputs.

* Running the tests

The tests in this file are run using Python and require [[https://github.com/tangentcode/tanco][tanco]].

#+begin_src bash
pip install tanco
#+end_src

To run, you supply tanco with a test file (like this one) using
the =-t= parameter, and a command to run with the =-c= parameter.

The command is generally an implementation of [[docs/b4i.org][b4i]] (the b4
interactive assembler) in some host language.

See the =test-b4-*= scripts in this repository for examples.


* TODO fix skipped first test
#+name: shouldfail
#+begin_src b4a
  this should fail but will be skipped
  because of a bug in tanco.
#+end_src


* debugger interface
** =%q= : quit

The =%q= command instructs b4 to quit.

b4 should not produce any output unless explicitly instructed to do so.

#+name: io.%q
#+begin_src b4a
> %q
#+end_src

** =?d= : query the data stack
#+name: io.?d
#+begin_src b4a
> ?d %q
ds: [] # should be an empty array
#+end_src

** TODO test the display of negative numbers

which of these should it be?

: ds: [CC00BBAA]
: ds: [-33FF4456]


** =?c= : query the call stack
#+name: io.?c
#+begin_src b4a
> ?c %q
cs: [] # should be an empty array
#+end_src

** push a hex number to the stack
#+name: io.hex
#+begin_src b4a
> FF CC ?d %q
ds: [FF CC]
= hex numbers are pushed to the data stack
: it should print in hex
#+end_src
** push an ASCII character onto the stack
#+name: io.ascii
#+begin_src b4a
> 'a 'A ' ?d %q
ds: [61 41 20]
= ascii syntax
: note lack of a second space after the '
: it should print in hex
#+end_src
** push control character addresses to stack
#+name: io.ctrl
#+begin_src b4a
> `@ `A `B `C `X `Y `Z ?d %q
ds: [0 4 8 C 60 64 68]
= control characters
: the 32 ASCII control characters act as a dictionary.
: (^@ is written 00 and is a no-op)
: ^@ calls the word whose address is at address 0000
:   (but the actual code emitted is =lb 00 cl= op, as bytecode 0 is a null op)
: ^A calls the word whose address is at address (4 * 1 = 0004)
: ^X calls the word whose address is at address (4 * (ord('X') - ord('@')) = 0x60)
: But if we want a handy way to refer to the address, we use `X
#+end_src

#+name: io.ctrl2
#+begin_src b4a
> `[ `\ `] `^ `_ ?d %q
ds: [6C 70 74 78 7C]
= non-alphabetic control characters
: there are 5 control characters after ^Z that use punctuation.
#+end_src
* constant ops
#+name: op.c
#+begin_src b4a
  > c0 c1 c2 n1 c4 ?d %q
  ds: [0 1 2 -1 4]
#+end_src

These ops push small constants onto =ds=.

* ALU / stack operations
** =ad= op
#+name: op.ad
#+begin_src b4a
> 01 02 ad ?d %q
ds: [3]
= ad: adds the top two items on the stack
: The result is pushed back to the stack.
#+end_src
** =ml= op
#+name: op.ml
#+begin_src b4a
> 03 03 ml ?d %q
ds: [9]
#+end_src
** =sb= op
#+name: io.math
#+begin_src b4a
> 0A 05 sb ?d %q
ds: [5]
#+end_src

** =dv= op
#+name: math.dv
#+begin_src b4a
> 0A 05 dv ?d %q
ds: [2]
#+end_src
** =md= op
#+name: math.md
#+begin_src b4a
> 0A 05 md ?d
ds: [0]
> zp 0A 03 md ?d %q
ds: [1]
#+end_src
** =sh= op
#+name: math.sh
#+begin_src b4a
  > : c4 c1 sh rt
  >   %s %s %s ?d
  ds: [8]
  = sh : shift
  : The 'sh' op shifts the bits of NOS by the amount in TOS.
#+end_src

#+name: math.shr
#+begin_src b4a
  > : c4 n1 sh rt
  >   %s %s %s ?d
  ds: [2]
  = sh : shift right
  : When the TOS is negative, we shift the NOS to the right.
#+end_src

** =an= op
#+name: math.an
#+begin_src b4a
> 12 35 an ?d %q
ds: [10]
#+end_src

** =or= op
#+name: math.or
#+begin_src b4a
> 12 35 or ?d %q
ds: [37]
#+end_src

** =xr= op
#+name: math.xr
#+begin_src b4a
> 12 35 xr ?d %q
ds: [27]
#+end_src

** =nt= op
#+name: math.nt
#+begin_src b4a
> 12 nt ?d %q
ds: [-13]
#+end_src

** =eq= op
#+name: math.eq
#+begin_src b4a
> AA BB eq CC CC eq ?d %q
ds: [0 -1]
#+end_src

** =lt= op
#+name: op.lt
#+begin_src b4a
> AA BB lt DD CC lt EE EE lt ?d %q
ds: [-1 0 0]
#+end_src

** =du= op
#+name: op.du
#+begin_src b4a
> 0A du ?d %q
ds: [A A]
#+end_src b4a
** =zp= op
#+name: op.zp
#+begin_src b4a
> 0A ?d zp ?d %q
ds: [A]
ds: []
#+end_src
** =sw= op
#+name: io.sw
#+begin_src b4a
> 0A 0B sw ?d %q
ds: [B A]
#+end_src
** =ov= op
#+name: op.ov
#+begin_src b4a
> 0A 0B ov ?d %q
ds: [A B A]
#+end_src
** =cd= and =dc= ops
#+name: op.cd-dc
#+begin_src b4a
> 0A dc ?d ?c
ds: []
cs: [A]
> cd ?d ?c %q
ds: [A]
cs: []
#+end_src

* batch memory access from debugger
** =?<addr>= inspect memory at address
#+name: b4i.mem-show
#+begin_src b4a
> ?100 %q
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src
** =:<addr>= assemble to memory at address
#+name: b4i.mem-write
#+begin_src b4a
> ?100
.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
> :100 00 AA BB CC
> ?100 %q
.. AA BB CC .. .. .. .. .. .. .. .. .. .. .. ..
#+end_src


* memory operations

** TODO test that %C clears memory and stacks
** =wi= : write int32 to address

=wi= writes a 32-bit integer to memory.

#+name: io.wi
#+begin_src b4a
> %C
> AABBCCDD 0100 wi
> ?100 %q
DD CC BB AA .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src

** =wb= : write byte to address

=wb= writes a single byte:

#+name: io.wb
#+begin_src b4a
> %C
> AABBCCDD 0100 wb
> ?100 %q
DD .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. # 16 0 bytes
#+end_src

** =ri= : read int32 from address

#+name: op.ri
#+begin_src b4a
> :100 AA BB CC 00
> ?100
AA BB CC .. .. .. .. .. .. .. .. .. .. .. .. ..
> 0100 ri ?d %q
ds: [CCBBAA]
#+end_src
** =rb= : read byte from address

=rb= reads a byte

#+name: op.rb
#+begin_src b4a
> :100 AA BB 00 77
> ?100
AA BB .. +W .. .. .. .. .. .. .. .. .. .. .. ..
> 0100 ri ?d %q
ds: [7700BBAA]
#+end_src

** =rs= : read signed byte from address
#+name: op.rs
#+begin_src b4a
  > :A 7F :B FF
  > :R @A rs @B rs rt
  > ^R ?d %q
  ds: [7F -1]
#+end_src




* register ops

** =@R= and =!R= : read and write registers
*** assembler:
#+name: op.rr-wr.runtime
#+begin_src b4a
  > :100 lb 12 !X @X c1 +X @X
  > %s ?d
  ds: [12]
  > %s ?d ?X  # !X
  ds: []
  00000012
  > %s ?d ?X  # @X
  ds: [12]
  00000012
  > %s %s ?d ?X  # c1 +X
  ds: [12 12]
  00000013
  > %s ?d ?X # @X
  ds: [12 12 13]
  00000013
  > %q
#+end_src

*** interactively:
#+name: op.rr-wr
#+begin_src b4a
> 12345678 !X ?d
ds: []
> @X ?d %q
ds: [12345678]
#+end_src

** =+R= : stream via register

The =+= ops take a value off the stack and add it to a register,
pushing the value of the register *before* the addition onto the data stack.
You can use this to treat the register as a cursor through a string or array of values.

#+name: op.plus-x
#+begin_src b4a
> 11223344 !X
> 04 +X 02 +X @X ?d %q
ds: [11223344 11223348 1122334A]
#+end_src


* debugger commands: stepping
** =?i= : query instruction pointer

=?i= queries the instruction pointer. it should print in hex

#+name: dbg.?i
#+begin_src b4a
> ?i %q
ip: 100
#+end_src
** =%s= : step command

Stepping increments the instruction pointer.

#+name: dbg.%s
#+begin_src b4a
> ?i %s ?i %q
ip: 100
ip: 101
#+end_src

* sequence ops
** TODO =..= (zero) is no-op
** load ops

The following operations load values into ram from the bytes following the
instruction pointer.

*** =li= op
#+name: op.li
#+begin_src b4a
  > :100 li 44 33 22 11 li FF FF FF FF rt
  > %s %s ?d %q
  ds: [11223344 -1]
#+end_src
*** =lb= op
#+name: op.seq.lb
#+begin_src b4a
> :100 lb AB
> ?100
lb AB .. .. .. .. .. .. .. .. .. .. .. .. .. ..
> ?d
ds: [] # it should not be on the stack YET
> %s ?d ?i %q
ds: [AB]
ip: 102
= lb: load byte
: lb loads a byte from memory at runtime.
: we never needed it before because our debug shell
: is pushing numbers directly to the stack
#+end_src
*** =lb= : load a byte
#+name: op.lb
#+begin_src b4a
  > :L lb 7F lb FF rt
  > ^L ?d %q
  ds: [7F FF]
#+end_src
*** =ls= : load signed byte
#+name: op.ls
#+begin_src b4a
  > :L ls 7F ls FF rt
  > ^L ?d %q
  ds: [7F -1]
#+end_src

** =hp= : hop
Hop is a small relative jump. It takes a signed 8-bit int as a parameter, and can thus move the instruction pointer forward up to 127 bytes, or backwards up to 128 bytes.

*** forward
#+name: op.hp.forward
#+begin_src b4a
> :100 hp 05
> ?i %s ?i %q
ip: 100
ip: 105
#+end_src
*** forward max
#+name: op.hp.forward-max
#+begin_src b4a
> :100 hp 7F
> %s ?i %q
ip: 17F
#+end_src
*** forward wrap
here we set the high bit so it's the same as negative 1.
(but then that puts us at address 00FF, which is too small so we clamp to 0100 and then we have an infinite loop)
#+name: op.hp.forward-wrap
#+begin_src b4a
> :100 hp 80
> %s ?i %q
ip: 100
#+end_src

*** backward
#+name: op.hp.backward
#+begin_src b4a
> :100 .. .. .. hp -3
> %s %s %s ?i %s ?i %q
ip: 103
ip: 100
#+end_src
*** backward (and out of bounds)
#+name: op.hp.backward-oob
#+begin_src b4a
> :100 hp -5
> %s ?i %q
ip: 100
#+end_src
*** zero?
This causes an infinite loop.
#+name: op.hp.zero
#+begin_src b4a
> :100 hp 00
> %s ?i %q
ip: 100
#+end_src
** =h0= hop if 0

=h0= is the same as =hp= but conditional.

It pops a value off the data stack, and only hops if the value is 0.

*** when 0
We push 0 to the stack and then step, so we should jump to address $0123
#+name: op.h0.when0
#+begin_src b4a
> :100 h0 23
> 00 %s ?i %q
ip: 123
#+end_src
*** when 1
Here the hop is not taken, but we still skip over the argument.
#+name: op.h0.when1
#+begin_src b4a
> :100 h0 23
> 01 %s ?i %q
ip: 102
#+end_src

** =jm= jump

=jm= is an unconditional jump to a 4-byte address.

#+name: op.jm
#+begin_src b4a
> :100 jm 78 56 34 12
> %s ?i %q
ip: 12345678
#+end_src

** =cl= call

=cl= is the same as =jm= but also pushes a return address to the control stack.

Note that the instruction pointer is incremented by 5 first, to skip over the =cl= op itself, plus its 4-byte argument.

#+name: op.cl
#+begin_src b4a
> :100 cl 78 56 34 12
> %s ?i ?c %q
ip: 12345678
cs: [105]
#+end_src

** =rt= return

In general, =rt= is used to return control from a called function.

The actual mechanism is a jump to an address popped from the control stack.

To simplify this test, we simply push the address we want to the control stack ourselves.

#+name: op.rt
#+begin_src b4a
> :100 rt
> 1234 dc ?i ?c %s ?i ?c %q
ip: 100
cs: [1234]
ip: 1234
cs: []
#+end_src

** =rt= dynamic call caveat

Here's a small catch for the "dynamic call" technique used in the previous test.

It =only= comes into play when using the "calculator mode".

Note that in the previous test, we used =%s= to trigger a step. This
reads an instruction from RAM[ip] and then causes the instruction pointer to increment.

If we had simply invoked =rt= directly using the "calculator", no "step" has occurred, and so the address would be off by one.

In general, it probably just doesn't make sense to use control flow ops from the "calculator" outside of testing.

#+name: op.rt.b4i
#+begin_src b4a
> 1234 dc ?i ?c rt ?i ?c %q
ip: 100
cs: [1234]
ip: 1233
cs: []
#+end_src

** =nx= next

This is probably the most complicated operation.

It's intended for loops where you do something a fixed number of times.

An integer counter is stored on the control stack. Every time =nx= is run,
the counter is decremented. A hop is triggered when the result is
/not/ zero, so that the loop continues until the countdown reaches 0.

On the step where it does reach zero, the counter is dropped.

In this test, we loop back to the starting address twice, and then proceed.

#+name: op.nx
#+begin_src b4a
> :100 nx 00
> 2 dc
> ?c ?i
cs: [2]
ip: 100
> %s ?c ?i
cs: [1]
ip: 100
> %s ?c ?i
cs: []
ip: 102
> %s ?c ?i
cs: []
ip: 103
> %q
#+end_src

* =io= op

** 'e for emit

This should emit a single character.

While running in the b4i interpreter, it should buffer the output until the end of line is received.

#+name: op.io.e
#+begin_src b4a
> 'h 'e io 'i 'e io %q
hi
#+end_src

* debugger commands: registers

** =:R= : point register at current assembly address
#+name: ctrl.e
#+begin_src b4a
  > :E lb 'e io rt
  > 'o ^E 'k ^E
  ok
  > %q
#+end_src

** =?R= : show contents of register R
#+name: here
#+begin_src b4a
  > ?E                # by default, most registers are blank
  00000000
  > ?_                # but "here" pointer is set to $100=256
  00000100
  > :E lb 'e io rt    # assemble "emit"
  > ?E                # now ^E should be assigned
  00000100
  > ?_ %q             # and ^_ should reflect the 4 bytes we assembled
  00000104
#+end_src

* assembler macros
** =@lbl= and =!lbl= : get/set address (b4a)
#+name: b4a.getset
#+begin_src b4a
  > :int 04 03 02 01
  > :get @int rt
  > :set !int rt
  > get ?d
  ds: [1020304]
  > 5 set get ?d %q
  ds: [1020304 5]
#+end_src

These are macros. They emit a =li= op, followed by the address, then either =ri= or =wi=.


* TODO [0/2] system ops (how to test these?)
** TODO =db=  triggers the debugger
** TODO =hl=  halts the virtual machine
