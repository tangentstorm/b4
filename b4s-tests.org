#+title: b4s: b4vm symbolic scaffolding

* Intro

=b4s= ("beforce") is a tiny lisp-like language written in =b4a= assembly language.

* ensure BIOS is loaded
#+name: b4s.bios
#+begin_src b4a
  > cscr 'o ^O 'k ^O sp B4 putn \0 %q
  ok B4
#+end_src

Assuming the bios is loaded, the above line clears
the internal video screen and prints 'ok B4'.

The `\0` word prints out the first line of video memory.
See [[file:bios-tests.org][bios-tests.org]] for more info.

* nil
#+name: b4s.cells
#+begin_src b4a
  > inic
  > @numc ?d zp
  ds: [3FF]
  > @numc 8 ml @fst^ ad   # nil should be in cell 400
  > @nil^ eq ?d zp
  ds: [-1]
  > @nil^ nil eq ?d zp
  ds: [-1]
  > @nil^ nil? ?d zp
  ds: [-1]
  > %q
#+end_src

Nil is a special cell that marks the end of the list,
and is also used to indcate false.

* car and cdr (nil)
#+name: b4s.nil-parts
#+begin_src b4a
  > inic
  > nil car nil?
  > nil cdr nil?
  > ?d %q
  ds: [-1 -1]
#+end_src

Every cell is a pair of values.

Traditionally, the first of the pair is called the "car"
and the second is called the "cdr" (rhymes with 'footer').

Nil's car and cdr both point back to nil.

* TODO =car!= and =cdr!=
* celn
#+name: celn
#+begin_src b4a
  > inic
  > nil celn ?d zp  # nil is -1
  ds: [-1]
  > @fst^ celn ?d zp
  ds: [0]
  > # last (non-nil) cell should have number (numc-1)
  > @end^ 10 sb celn
  > @numc c1 sb eq ?d %q
  ds: [-1]
#+end_src

The function =celn= can be used to map a cell back to its number.
This is only intended for use by these tests, so that we can test
cell adddresses without refering to exact memory locations.

* =inic= and =nxt^= : pointer to next free cell
#+name: b4s.nxt^
#+begin_src b4a
  > inic
  > @nxt^ celn ?d zp   # next cell should be cell 0
  ds: [0]
  > @nxt^ car celn ?d zp
  ds: [1]
  > @nxt^ car car car car celn ?d zp
  ds: [4]
  > # car of last cell in list should be nil
  > @end^ 10 sb car nil? ?d %q
  ds: [-1]
#+end_src

The =inic= routine's last job is to link the allocated
cells together into a list of free cells, storing the
address of the first free cell in @nxtc.

At start, the first free cell should be the first cell,
and its car should point to the next cell (which is the
address 8 bytes ahead).

* =nxtc= : take next cell from free list
#+name: b4s.nxtc
#+begin_src b4a
  > inic
  > # next free should be cell 0
  > @nxt^ celn ?d zp
  ds: [0]
  > # if we take it, then next up is cell 1
  > nxtc celn @nxt^ celn ?d %q
  ds: [0 1]
#+end_src

We can take the next cell from the free list with =nxtc=,
which will put the current value of =nxt^= on the stack, and
cause the =nxt^= to move to the next cell in the list.

* =cons= : construct a cell
#+name: b4s.cons
#+begin_src b4a
  > inic
  > ABCD 1234 cons !C
  > # 1. it allocates a new cell
  > @C celn ?d zp
  ds: [0]
  > # 2. it sets cdr to TOS
  > @C cdr ?d zp
  ds: [1234]
  > # 3. it sets car to NOS
  > @C car ?d zp %q
  ds: [ABCD]
#+end_src

* =nlst= : combine n values into a list
#+name: b4s.nlst
#+begin_src b4a
 > inic
 > # construct the list: (AB CD efgh)
 > AB cnum CD cnum 'e 'f 'g 'h glu csym 3 nlst !L
 > @L celn ?d zp
 ds: [5]
#+end_src

* =cnum= / =pnum= : construct and print a lisp number
#+name: b4s.nums
#+begin_src b4a
  > inic
  > 7C cnum du pnum \0 cscr
  7C
  > celn ?d %q
  ds: [0]
#+end_src

We have to wrap plain b4 numbers in cells in order to use them in b4s.

=cnum= encloses a plain b4 number in a cell.

=pnum= prints the numeric cell (depends on =putn= from the bios).

* =glu= and =o4c= : symbol helpers
#+name: b4s.sym-helpers
#+begin_src b4a
  > 's 'y 'm '! ?d        # four ascii characters
  ds: [73 79 6D 21]
  > glu ?d                # glue together as symbol
  ds: [216D7973]
  > o4c ?d \0 %q          # o4c calls ^O on each non-zero char
  ds: []
  sym!
#+end_src

For now, symbols are limited to 4 ascii characters, which are packed
together into a standard int32.

We could use base 36 numbers to pack 6 alphanumeric characters into a
symbol, but we'd be limited to all uppecase (or lowercase). But one
byte per character opens the door to using utf-8 later.

The idea is to use the =car= to chain multiple 4-character symbol fragments
together to make longer strings. But for now, 4 characters symbols are enough.

* =csym= / =psym= : construct and print symbols
#+name: b4s.syms
#+begin_src b4a
  > inic
  > 't 'a 'c 'o ?d
  ds: [74 61 63 6F]
  > glu csym du psym \0 cdr ?d
  ds: [6F636174]
  taco
#+end_src

Symbols are stored in the cdr of a cell, just like a b4s number.

* =ctyp= : distinguish cell types
#+name: b4s.ctyp
#+begin_src b4a
  > inic
  > # by default, cells are type 0b000=0 (lists)
  > nxtc ctyp ?d zp
  ds: [0]
  > # numbers are type 0b010=2
  > 12345 cnum ctyp ?d zp
  ds: [2]
  > # symbols are type 0b100=4
  > 's 'i 'm 'i glu csym ctyp ?d zp %q
  ds: [4]
#+end_src

So far, symbols and numbers are both cells with =nil=
in the car and a 32-bit value in the cdr. Since we created the
cells ourselves, we know what's in them, and can call the
correct print routine manually.

But when we're dealing with dynamic data, we need some way to
tell them apart.

Since we know that cells are aligned to an 8-byte address (meaning
a cell address always ends in =0= or =8=), we can use the lower three
bits to store extra data.

We will use the lowest bit in a mark-and-sweep garbage collector later.
Meanwhile, the next two bits are a type code.

The =ctyp= word returns this code.

(The final bit pattern 0b110=6 is reserved for future use. It will
indicate a pointer to a non-b4s value for interop with other languages
running on the vm.)

Note that once you implement =ctyp=, you will probably need to mask out
the type code in the implementation of =car= and =cdr=.

* =pval= 1 : atoms
#+name: b4s.pval-num-sym
#+begin_src b4a
  > inic
  > 's 'y 'm 00 glu csym pval \0 cscr
  sym
  > 's 'y 'm 00 glu cnum pval \0 %q
  6D7973
#+end_src

Now that we have =ctyp= we can start to implement pval.
It should inspect the type code and then call =pnum= or =psym= accordingly.

* =pval= 2 : nil
#+name: b4s.pval-nil
#+begin_src b4a
  > inic
  > nil pval ?d \0 %q
  ds: []
  ()
#+end_src

=nil= is a special value and should have type code 00, since it's the name for the empty list.
However, if we print it on its own, we should print the value '()'

* =pval= 3 : dotted pairs
#+name: b4s.pval-pair
#+begin_src b4a
  > inic
  > c1 cnum c2 cnum cons pval \0 %q
  (1 . 2)
#+end_src

* =pval= 4 : lists of atoms
#+name: b4s.pval-list
#+begin_src b4a
  > inic
  > C0 cnum nil cons du pval \0 cscr
  (C0)
  > C1 cnum sw cons du pval \0 cscr
  (C1 C0)
  > C2 cnum sw cons du pval \0 cscr
  (C2 C1 C0)
#+end_src

* =pval= 5 : nested lists
#+name: b4s.pval-nested
#+begin_src b4a
  > inic
  > C0 putn sp   nil nil cons pval \0 cscr
  C0 (())
  > 1 cnum nil cons !A
  > 2 cnum 3 cnum nil cons cons !B
  > A putn sp @A pval \0 cscr
  A (1)
  > B putn sp @B pval \0 cscr
  B (2 3)
  > C3 putn sp   @A @B cons pval \0 cscr
  C3 ((1) 2 3)
  > C4 putn sp   @B @A cons pval \0 cscr
  C4 ((2 3) 1)
#+end_src

* =wquo=, =wqup=, =wqdn=: quotation builders
#+name: b4s.pval-quotes
#+begin_src b4a
  > inic
  > CA cnum wquo pval \0 cscr
  > CB cnum wqup pval \0 cscr
  > CC cnum wqdn pval \0 cscr
  'CA
  `CB
  ,CC
#+end_src

Like most lisps, b4s has a special syntax for quoting and
unquoting values.

The b4a words =wquo=, =wqup=, and =wqdn= each store their argument in
the cdr of a new cell whose car is a symbol.

=pval= needs to recognize when any of these symbols appear
in the =car= of a cell, and instead of printing it as a list,
print the special character corresponding to the symbol, and
then print the =cdr=.

- =(quo . x)= prints as ='x=
- =(qup . x)= prints as =`x=
- =(qdn . x)= prints as =,x=

* =msym=
#+name: b4s.msym
#+begin_src b4a
  > :S 'x 'y ..
  > C0 inic pre msym @M @N ?d %R
  ds: [C0 -1 79780000]
  > :S 'x ') ..
  > C1 inic pre msym @M @N ?d %R
  ds: [C1 -1 78000000]
#+end_src

=msym= matches a symbol and stores its corresponding number in =@N=.

* =node=, =newc=, =acq!=, and =done= : imperative list builder
#+name: b4s.rlis
#+begin_src b4a
  > inic
  > C0 putn sp node @L pval \0 cscr
  C0 (())
  > C1 putn sp c1 cnum acq! @L pval \0 cscr
  C1 (1 ())
  > C2 putn sp c2 cnum acq! @L pval \0 cscr
  C2 (1 2 ())
  > C3 putn sp done pval \0 cscr go00
  C3 (1 2)
#+end_src

- @L holds the list we're building
- @Q holds the last cell in the list
- @P is the previous cell
-acq! appends to the end of the list
  - the list always has an extra (()) at the end (that's @Q)
  - when we append, we set Q.car, set P=Q, and set Q to a new cel in P's cdr
-end! ends the list by replacing P's link to Q with its cdr
- final result stays in @LR
- must preserve @L, @P, and @Q when entering nested lists
- helper tools seem to be working (since this test passes)
- but the actual parser is not quite there yet.

* TODO test that @P, @L, and @Q are preserved (for nested builds)

* =rval= 1: atoms
#+name: b4s.rval-atoms
#+begin_src b4a
  > inic
  > :S ..
  > C0 pre rval ?d %R
  ds: [C0 0]
  > :S '0 ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  0
  > :S 'x ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  x
  > # use same string again, but set m0 first
  > C3 pre m0 rval ?d  # exit early with nothing on stack
  ds: [C3]
#+end_src

=rval= is attempts to read a b4s value from the input.

It is /also/ matcher, so if the match flag is initally 0,
it does nothing (leaving the stack unchanged).

If @M is set, then rval tries to match a value.
  - on success, it leaves the value and -1 on the stack.
  - on failure, it leaves only 0 on the stack.

This is the first of several tests for =rval=.

Here, we're making sure it can parse both symbols and hex numbers.

Recall that the matchers =mhex= and =msym= both populate =@N= so
the trick is to call those matchers and (on success) call
either =cnum= or =csym= to build the cell.

* =rval= 2: quoted atoms
#+name: b4s.rval-quoted
#+begin_src b4a
  > inic
  > :S '' '0 ..
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  '0
  > :S '' 'x ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  'x
#+end_src

* =rval= 3: the empty list
#+name: b4s.rval-nil
#+begin_src b4a
  > inic
  > :S '( ') ..
  > C0 pre rval sw !A ?d %R
  ds: [C0 -1]
  > C1 @A nil? ?d %R
  ds: [C1 -1]
  > C2 putn sp @A pval \0 %q
  C2 ()
#+end_src

There should only ever be one empty list, called =nil= internally
and written as =()=.

* =rval= 4: lists with one atom
#+name: b4s.rval-atom-lists
#+begin_src b4a
  > inic
  > :S "(0)" ..
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  (0)
  > :S "(C1)" ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  (C1)
  > # same thing but with a space after
  > :S "(C2 )" ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  (C2)
  > # ... or in front
  > :S "( C3)" ..
  > C3 pre rval sw pval ?d \0 cscr %R
  ds: [C3 -1]
  (C3)
  > # ... or everywhere
  > :S "  (  C4  )  " ..
  > C4 pre rval sw pval ?d \0 cscr %R
  ds: [C4 -1]
  (C4)
#+end_src

In order to parse the input =(x)=, =rval= will need to be called
recursively. Here we parse some lists containing single atoms.
There can be any amount of whitespace around the values or
parentheses in a list.

* =rval= 5: longer lists

#+name: rval-longer-lists
#+begin_src b4a
  > inic
  > :S "(0 1)"
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  (0 1)
  > :S "(nice ice)" ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  (nice ice)
  > :S "(one two 3 4 5 six 7 8 9)" ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  (one two 3 4 5 six 7 8 9)
#+end_src

* =rval= 6: nested lists
#+name: rval-nested
#+begin_src b4a
  > inic
  > :S "(())" ..
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  (())
  > :S "((C1))" ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  ((C1))
  > :S "(1 (C2) 3)" ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  (1 (C2) 3)
  > :S "(one (two 3) 4 (5 6 7 8 (9)))" ..
  > C4 pre rval sw pval ?d \0 cscr %R
  ds: [C4 -1]
  (one (two 3) 4 (5 6 7 8 (9)))
#+end_src

* =rval= 7: nested nils
#+name: b4s.rval-nested-nils
#+begin_src b4a
  > inic
  > :S "(())" ..
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  (())
  > :S "( () () )" ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  (() ())
  > # the last () is never printed
  > :S "( () () () )" ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  (() () ())
  > :S "( (() ()) )" ..
  > C2 pre rval sw pval ?d \0 cscr %R
  ds: [C2 -1]
  ((() ()))
#+end_src

* =rval= 8: dotted pairs
#+name: b4s.rval-dotted
#+begin_src b4a
  > inic
  > :S "(a . 1)" ..
  > C0 pre rval sw pval ?d \0 cscr %R
  ds: [C0 -1]
  (a . 1)
  > pre rval zp du
  > car pval \0 cscr
  > cdr pval \0 cscr
  a
  1
  > :S "((a . 1) (b . 2) . c))" ..
  > C1 pre rval sw pval ?d \0 cscr %R
  ds: [C1 -1]
  ((a . 1) (b . 2) . c)
#+end_src


* =nlst= (build list from n cells)
#+name: nlist-print
#+begin_src b4a
 > inic
 > # construct the list: (AB CD efgh)
 > AB cnum CD cnum 'e 'f 'g 'h glu csym 3 nlst
 > pval \0
 (AB CD efgh)
#+end_src

We saw this before and tested that it allocated 5 cells,
but didn't verify the resulting structure because
we didn't have =pval=.

* =cnav= (use hex number as path through cells)
#+name: nlist-cnav
#+begin_src b4a
> :S "(A (B . C) (D E (F)))" ..
> :T sw putn sp @L sw cnav pval \0 cscr rt
> inic pre rval zp !L
> # any hex digit 0..=E is that many cdr calls
> C0 0 ^T  # 0 cnav is identity
C0 (A (B . C) (D E (F)))
> C1 1 ^T  # 1 = cdr
C1 ((B . C) (D E (F)))
> C2 2 ^T  # 2 = cdr cdr
C2 ((D E (F)))
> C3 3 ^T  # 3 = cdr cdr cdr (here: ())
C3 ()
> C4 4 ^T  # 4 = cdr of nil is nil
C4 ()
> # hex digit F indicates car
> C5 F ^T  # F = car
C5 A
# hex digits from right to left form a path
> C6 F1 ^T # (car (cdr x)) -> cadr
C6 (B . C)
> C6 FF1 ^T # (car (car (cdr x))) -> caadr
C6 B
> C7 1F1 ^T # (cdr (car (cdr x))) -> cdadr
C7 C
> C8 F2 ^T # (car (cdr (cdr x))) -> caddr
C8 (D E (F))
> C9 FF2 ^T
> CA 1F2 ^T
C9 D
CA (E (F))
> CB F1F2 ^T
CB E
> CC 2F2 ^T
CC ((F))
> CD F2F2 ^T
CD (F)
> CE FF2F2 ^T
CE F
#+end_src

=cnav= is a word that lets you navigate through a =cons=
tree using a single hex number whose digits describe
a path.

* =eq?=  (=eq= is a b4 opcode)
#+name: b4s.eq?
#+begin_src b4a
> inic
> C0 c1 cnum c1 cnum eq? ?d %R
ds: [C0 -1]
> C1 c1 cnum c2 cnum eq? ?d %R
ds: [C1 0]
> C2 'a 'b 'c 'd glu csym 'a 'b 'c 'd glu csym eq? ?d %R
ds: [C2 -1]
> C3 'a 'b 'c 'd glu csym 'w 'x 'y 'z glu csym eq? ?d %R
ds: [C3 0]
> C4 nil nil eq? ?d %R
ds: [C4 -1]
> # last one is structurally equal, but eq? doesn't know this
> C5 c1 cnum nil cons c1 cnum nil cons eq? ?d %R
ds: [C5 0]
#+end_src

=eq?= is a shallow test for whether two cells are the "same".
If the cells are atoms (symbols or numbers), then we compare
their values. Otherwise, we do a direct pointer comparison.

* =map=
#+name: b4s.map
#+begin_src b4a
 > :S "(0 1 2)" ..
 > :F cdr c2 ml c1 ad cnum rt
 > inic pre rval zp du @F map pval \0 cscr
 (1 3 5)
 > pval \0
 (0 1 2)
#+end_src

=map= applies a b4 word to every item in a list.
The standard implementation stores the function in =@F=
and uses a helper word named =mapf= to call it
on each item.

Note that the original list is not modified in place.

* =appq=
#+name: b4s.appq
#+begin_src b4a
  > :S "(a 1 (b 2))" ..
  > inic pre rval zp appq pval \0
  ('a '1 '(b 2))
#+end_src

=appq= wraps each item of a list with the symbol =quo=.

* =symc= - symbol from char
#+name: b4s.csym1
#+begin_src b4a
  > :S 'a  .. rt
  > inic
  > pre rval zp cdr 'a symc cdr ?d %R
  ds: [61000000 61000000]
  > pre rval zp 'a symc eq? ?d
  ds: [-1]

#+end_src

* =asoc=
#+name: b4s.asoc
#+begin_src b4a
  > :S "((a . 123) (b . xyz))" ..
  > inic pre rval zp
  > 'a symc ov asoc pval \0 cscr
  123
  > 'b symc ov asoc pval \0 cscr
  xyz
  > 'c symc ov asoc pval \0 cscr
  ()
#+end_src

=asoc= (sym env - cell) looks up a symbol in an association list
(environment). The environment is a list of dotted pairs, with
symbols in the =car= and associated values in the =cdr=. If a pair
with the target symbol is found, its cdr is returned.
Otherwise, =asoc= returns =nil=.

* =eval=
* =econ=
* =elis=
* =apnd=

* =aply= (f args)

* =eval= : numbers eval to themselves
* =eval= : symbols eval to values
* =eval= : the symbol =t=
* =eval= : quote
* =eval= : (car xy) -> x
* =eval= : (cdr xy) -> y
* =eval= : (sym? x)
* =eval= : (num? x)
* =eval= : (cons x y)
* =eval= : (cond)
* =eval= : (lam)
* =eval= : (let)

* =eval=
 start here because syms, nums, and nil eval to themselves
