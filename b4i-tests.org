#+title: b4i macro and interactive commands test suite

* About this file
This file demonstrates the macro and interactive commands.
Currently these interactive features are present only in
the lil implementation (`mb4.deck`). The macros are also
available in the pascal version's assembler.

* TODO bug: b4i treated first two chars as opcode
#+name: b4i.bug.mlatu
#+begin_src b4a
  > :mlatu rt
  > 2 3 mlatu ?d %q
  ds: [2 3]
#+end_src

* Interactive assembler: assemble to any address
#+name: b4i.addr
#+begin_src b4a
  > :100 ^A ^B
  > ?100
  ^A ^B .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  > :104 ^C ^D
  > ?100
  ^A ^B .. .. ^C ^D .. .. .. .. .. .. .. .. .. ..
  > :100 ^X ^Y
  > ?100
  ^X ^Y .. .. ^C ^D .. .. .. .. .. .. .. .. .. ..
  > ?104
  ^C ^D .. .. .. .. .. .. .. .. .. .. .. .. .. ..
#+end_src

* invoke word via the "register dictionary"

#+name: b4i.invoke
#+begin_src b4a
> :A lb 'a lb 'e io rt
> :B lb 'b lb 'e io rt
> ?A
00000100
> ?B
00000106
> ^A ^B %q
ab
= invoke register
: using ^ with a register name should trigger the register
#+end_src




* TODO comments

this doesn't work because the old test parser can't andle the "#"

# #+name: comments
# #+begin_src b4a
# > # this is a comment
# > 01 # 02
# > ?d
# ds: [1]
# = comments
# : comments start with '#' and everything until the end of line is ignored
# #+end_src

* Macros
** .i .e .t (if/else/then)
#+name: macro.if-else-then
#+begin_src b4a
> :E lb 'e io rt
> :T c1 .i lb 'T ^E .e lb 'F ^E .t rt
> ^T %q
T
= if/else/then macro
: if the top of the stack is non-zero, execute the first block
: otherwise, execute the second block
#+end_src

** .w .d .o (while/do)
#+name: macro.while-do
#+begin_src b4a
> :E lb 'e io rt
> :T lb 'a !A lb 03 .w du .d c1 +A ^E c1 sb .o rt
> ^T %q
abc
= while/do macro
: while the top of the stack is non-zero, execute the block
: decrement the top of the stack each iteration
#+end_src

** .f .n (for/next)
#+name: macro.for-next
#+begin_src b4a
> :E lb 'e io rt
> :T lb 03 .f cd du dc lb 'a ad ^E .n rt
> ^T %q
dcb
= for/next macro
: execute the block a fixed number of times
: the counter is stored on the control stack
#+end_src

** .^ (linked list)
#+name: macro.linked-list
#+begin_src b4a
> :100 .^ .^ .^ .^
> ?100 %q
.. .. .. .. .. ^A .. .. ^D ^A .. .. ^H ^A .. ..
= .^ : linked list
: creates a linked list in little endian format
: each node points to the previous node's address.
: The first four bytes are the null value `0x00`,
: then `0x100` (`00 01 00 00` in little endian format).
: then `0x104` (`04 01 00 00` in little endian format).
: then `0x108` (`08 01 00 00` in little endian format).
#+end_src

* interactive get/set for labels

** get/set (b4i)
#+name: b4i.getset
#+begin_src b4a
  > :int 04 03 02 01
  > @int ?d
  ds: [1020304]
  > zp 5 !int ?d
  ds: []
  > @int ?d %q
  ds: [5]
#+end_src

* Interactive Commands

** %R (reset)
#+name: interactive.reset
#+begin_src b4a
> 01 02 03 ?d %R ?d %q
ds: [1 2 3]
ds: []
= %R : reset the virtual machine
: resets the stacks and sets ip to 100.
: does not clear memory.
#+end_src

** %C (clear)
#+name: interactive.clear
#+begin_src b4a
> 01 02 03 ?d %R ?d %q
ds: [1 2 3]
ds: []
= %C : clear the virtual machine
: clears the stacks and resets memory
#+end_src

** `label (use label)
#+name: b4i.label
#+begin_src b4a
  > :lbl 'a 'b 'c 'd
  > : li `lbl rt
  > ?lbl
  00000100 +A +B +C +D li .. ^A .. .. rt .. .. .. .. .. ..
  > `lbl ?d %q
  ds: [100]
  = `label : use label
  : pushes the address of the label onto the stack
#+end_src

** edge case: names that are also lowercase hex numbers
Only uppercase hex should work.
#+name: b4i.hexname
#+begin_src b4a
  > :def 'a 'b 'c 'd
  > : li `def rt
  > ?def
  00000100 +A +B +C +D li .. ^A .. .. rt .. .. .. .. .. ..
  > `def ?d
  ds: [100]
#+end_src

*** ?m (show memory)
#+name: interactive.show-memory
#+begin_src b4a
> :100 01 02 03 04 'h 'e 'l 'l 'o
> ?100 %q
^A ^B ^C ^D +H +E +L +L +O .. .. .. .. .. .. ..
= ?m : show memory
: displays the contents of memory starting at the specified address
#+end_src

* bug: %C should clear the dictionary
#+name: bug.c.clears.dictionary
#+begin_src b4a
> :foo rt
> \p
0100:foo
> %C
> \p
> %q
#+end_src

* TODO: Additional tests for other macros and interactive commands
** %e (run to end)
##+name: interactive.run-to-end
##+begin_src b4a
= %e : run to end
: executes instructions until a return is encountered
##+end_src

** %\ (goto)
##+name: interactive.goto
##+begin_src b4a
= %\ : goto
: jumps to the address stored in the "@\" register
##+end_src
