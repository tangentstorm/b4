#+title: b4 bios tests

These tests use b4i to test the bios.

* TODO remove hard references to term buffer address from the tests

* cscr : fill screen with spaces
#+name: cscr
#+begin_src b4a
  > # the terminal buffer is set to address 100
  > @tmb ?d
  ds: [100]
  > # 'cscr' fills it with spaces
  > cscr ?100
  @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@
  > # the output buffer ends at address 500
  > @tmb @tmw @tmh ml ad ?d
  ds: [100 500]
  > # and that should hold the colors: (^G is 07)
  > ?500
  ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G ^G
  > # but the cscr should have filled the 16 previous bytes:
  > ?4F0 %q
  @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@
#+end_src

* maxx/maxy
#+name: maxx/maxy
#+begin_src b4a
  > @tmw maxx @tmh maxy ?d %q
  ds: [40 3F 10 F]
#+end_src

* cursor
#+name: cursor
#+begin_src b4a
  > curx cury ?d zp zp
  ds: [0 0]
  > 2F C goxy curx cury ?d %q
  ds: [2F C]
#+end_src

* emit
#+name: emit
#+begin_src b4a
  > cscr 'h emit 'i emit ?100 %q
  +H +I @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@ @@
#+end_src

* goxy
#+name: goxy-emit
#+begin_src b4a
  > cscr 4 0 goxy 'h emit 'i emit ?100 %q
  @@ @@ @@ @@ +H +I @@ @@ @@ @@ @@ @@ @@ @@ @@ @@
#+end_src

* puts
#+name: puts
#+begin_src b4a
  > :S 0D 'h 'e 'l 'l 'o ', 20 'w 'o 'r 'l 'd '!
  > @S puts ?100 %q
  +H +E +L +L +O @L @@ +W +O +R +L +D @A @@ @@ @@
#+end_src

* \0 to show first line
#+name: .slash-0
#+begin_src b4a
  > :S 0D 'h 'e 'l 'l 'o ', 20 'w 'o 'r 'l 'd '!
  > @S puts \0 %q
  hello, world!
#+end_src

* putn
#+name: putn
#+begin_src b4a
  > c0 putn \0 cscr
  0
  > n1 putn \0 cscr
  -1
  > ABCDEF putn \0 cscr
  ABCDEF
#+end_src

* base
Base allows you to =putn= in different bases (up to base 16 unless you extend the string)
#+name: bios.base
#+begin_src b4a
  > 0A `base wb 0F putn \0 cscr # decimal
  15
  > 10 `base wb 0F putn \0 %q # hex
  F
#+end_src



* =@K= : character pointer

** =ch/nc= : current and next character
#+name: b4s.ch/nc
#+begin_src b4a
  > :K 'a 'b 'c
  > ch ?d zp
  ds: [61]
  > nc ch nc ?d zp %q
  ds: [62 62 63]
#+end_src

The BIOS uses register =K= as an input pointer. think: "K"aracter.

The word =ch= simply retrieves the byte at that value.

** =la= : look ahead
#+name: b4s.la
#+begin_src b4a
  > :K 'a 'b 'c
  > ch c2 la c1 la ?d %q
  ds: [61 63 62]
#+end_src
=la= is for lookahead


* TODO send keys to the keyboard buffer
** manual way
** '\> ' syntax

* TODO test moving/resizing the screen buffer

* =rot=
#+name: b4a.rot
#+begin_src b4a
> 1 2 3 rot ?d
ds: [2 3 1]
#+end_src
