( b4 trees : a simple data structure )

: qn* swap times ; "( qn- ) run quote n times" :doc
: qn+ swap iter  ; "( qn- ) run quote n times, put i++ on stack" :doc
: qn- swap iterd ; "( qn- ) run quote n times, put i-- on stack" :doc


127 constant b4.len 

( we want to increment both the address and the amount )
( !+ is na-A so we use dip to inc and then dup the nos )

: b4.init 0 swap [ [ $01010101 + dup ] dip !+ ] b4.len qn* ;
  "( a- ) initialize an empty b4 tree at address a" :doc

: nos+ rot + swap ; "( xyz-Xy ) increment nos x by z" :doc
: nos2 over swap  ; "( yz-yyz ) dup the nos" :doc

: b4.init 0 swap [ over swap $01010101 + !+ ] b4.len times ;

create tree here b4.len allot b4.init
hex tree [ @+ putn cr ] 127 qn*
