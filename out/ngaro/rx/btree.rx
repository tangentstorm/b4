( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2013, Michal J Wallace                         )
( License: ISC                                                 )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

( TODO: move to math' maybe? )
: sgn dup 0; drop 0 > [ 1 ] [ -1 ] if ; "( n-n ) signum function." :doc
: cmp - sgn ; "( ab-n ) comparison. a<b:-1 a=b:0  a>b:1 " :doc

hex 80000000 constant nil
"This 32-bit signed int is a 'negative zero'. Useful for 'missing' or 'NaN' values." :doc
decimal

4 variable: fanout  "max number of children per internal node" :doc
1 variable: depth   "current depth of the tree" :doc
0 variable: root    "address of root node of the tree" :doc
: .cmp cmp ; "( ab-c ) revectorable method, in case you want string keys" :doc


  ( -- nodes ------------------------------------------------- )

  : nodesize fanout @ 2 * 1+ ; 
  "( -n ) x*keys, + x+1*addrs, where x=fanout" :doc
  : node+ nodesize allot    nil over ! ; "( -a ) create a new node" :doc

  : count fanout @ + ;
  
  0 [ dup putn 1+ dup 4 = ] until

  ( -- trees ------------------------------------------------- )
  : new node+ dup !root ; "( -a ) construct a new tree" :doc

  : pos? ( TODO )
  ; "( k-aof ) find addr/offset where key belongs, flag = already there" :doc

  ( is there room to add another key? )
  : room?  ( o - f ) fanout < ;

  ( p )
  : ensure ( k ) dup pos? [ + ] [ dup room? [ ins ] [ ] if ] if ;

  : put pos? [  ]
  ; "( vk-a ) put the value"

  : get?
  ; "( k - v? f ) try to fetch value v for key k. flag indicates success" :doc


  : -> ensure
  ; "( k-a ) find/create value slot for key." :doc


( -- example usage --- )
( with btree' )
100 -> 0 !
200 -> 2 !
300 -> 3 !
( without )
