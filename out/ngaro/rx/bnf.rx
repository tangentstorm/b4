( parsing routines )
( inspired by http://www.bradrodriguez.com/papers/bnfparse.htm )
needs ng' with ng' chain: bnf'

variables| rs0 rs1 |
: [r &[ do drop, ` rs0 !, drop, ` rs1 !, ; immediate
  "( → aa ) like '[', but w/caller's address stack. (use 'r]' to end)" :doc

: r] ` rs1 @, push, ` rs0 @, push, &] do ; immediate
  "( aa → ) restore quote's address stack" :doc

: pop3  pop  pop  pop  ; "pop thrice" :doc
: drop3 drop drop drop ; "drop thrice" :doc

: || 0; pop drop ;
  "( b → b ) Short-circuit 'OR'. Exits caller unless TOS=0" :doc
: && dup 0 = 0; pop 2drop ;
  "( b → b ) Short-circuit 'AND' Exits caller if TOS=0" :doc

variable m "match flag" :doc

{{
   variable a "read pointer" :doc
   variable b "write pointer" :doc

   : <rule  @m && pop @b @a 2push push ;
      "( → ) save state, lest we need to backtrack" :doc
   : rule>  pop3 @m [ 2drop ] [ !a !b ] if push ;
      "( → ) discard saved state, backtracking if match failed." :doc

---reveal---
  : r:  ` : ` <rule     ; immediate "( → ) Begin parse rule definition." :doc
  : ;r      ` rule> ` ; ; immediate "( → ) End parse rule definition." :doc
  : | pop3 @m [r drop3 r] [r 2over 2push !a !b 1 !m push r] ;
    "( → ) Exit caller (a parse rule) if matched."

  : @token (   → n ) @a @tib + @ ;
  : +token ( f →   ) [ a ++ ] ifTrue ;
  : =token ( n   ) @m [ @token = dup !m +token ] [r drop 2push r] if ;
  : token  ( n   ) create , does> ( a )  @ =token ;

}}

;chain
without ( ng )
