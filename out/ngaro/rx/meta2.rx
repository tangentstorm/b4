( unfinished experimental port of the meta-ii metacompiler to retro )

( .SYNTAX PROGRAM )
ADR PROGRAM

( OUT1 = '*1' .OUT('GN1') / '*2' .OUT('GN2') /     )
(        '*' .OUT('CI') / .STRING .OUT('CL '*) .,  )
: OUT1              [ "*1" TST ] ( BF L1 ) [ "GN1" wr ]
  ( L1 ) ( BT L2 )  [ "*2" TST ] ( BF L3 ) [ "GN2" wr ]
  ( L3 ) ( BT L2 )  [ "*" TST ]  ( BF L4 ) [ "CI"  wr ]
  ( L4 ) ( BT L2 )  [ SR ]       ( BF L5 ) [ "CL " wr @tok wr ]
  ( L5 )
  ( L2 ) ;
[ 0 | "okay" puts ]
[ 1 ^ "okay" puts ] do

: esc pop drop ; ( escape from a quote )
: | 0; esc 1 ;
n
[ 0 0; 'x putc ] do   ( emits nothing )
[ 1 0; 'x putc ] do   ( emits "x" )

( OUTPUT = ('.OUT' '(' )
(   $OUT1 ')' / '.LABEL' .OUT('LB') OUT1) .OUT('OUT') ., )
: OUTPUT  [ ".OUT" TST ] BF L6 [ "(" TST ] BE
  ( L7 ) [ CLL OUT1 ] BT L7 SET BE [ ")" TST ] BE
  ( L6 ) BT L8  [ ".LABEL" TST ] BF L9 [ CL "LB" OUT ] [ CLL OUT1 ] BE
  ( L9 ) 
  ( L8 ) BF L10 [ CL "OUT" OUT ]
  ( L10 ) 
  ( L11 ) ;


@tok isNumber? "NUM" em

( EX3 = .ID .OUT('CLL '*) / .STRING )
(   .OUT('TST '*) / '.ID' .OUT('ID') / )
(   '.NUMBER' .OUT('NUM') / )
(   '.STRING' .OUT('SR') / '(' EX1 ')' / )
(   '.EMPTY' .OUT('SET') / )
(   '$' .LABEL *1 EX3 )
(   .OUT('BT ' *1) .OUT('SET')., )
: EX3 [ ID ] BF L12 [ CL "CLL " CI OUT ]
  ( L12 ) BT L13 [ SR  ] BF  L14 CL  " CI OUT 
  ( L14 ) BT L13 TST " "TST.ID"  ] BF L15 CL [ "ID"  OUT ]
  ( L15 ) BT L13 [ ".NUMBER" TST ] BF L16 CL [ "NUM" OUT ]
  ( L16 ) BT L13 [ ".STRING" TST ] BF L17 CL [ "SR"  OUT ]
  ( L17 ) BT L13 [ "(" TST       ] BF L18 CLL EX1 BE [ ")" TST ] BE 
  ( L18 ) BT L13 [ ".EMPTY" TST  ] BF L19 CL [ "SET" OUT ]
  ( L19 ) BT L13 [ "$" TST       ] BF L20 LB GN1 OUT CLL EX3 BE CL "BT " GN1 OUT CL [ "SET" OUT ]
  ( L20 ) 
  ( L13 ) ;


( EX2 = (EX3 .OUT('BF ' *1) / OUTPUT) )
( $(EX3 .OUT('BE') / OUTPUT) )
( .LABEL *1 ., )
: EX2 CLL EX3 BF L21 CL "BF " GN1 OUT 
  ( L21 ) BT L22 CLL OUTPUT BF L23 
  ( L23 )
  ( L22 ) BF L24 
  ( L25 ) CLL EX3 BF L26 CL "BE" OUT 
  ( L26 ) BT L27 CLL OUTPUT BF L28 
  ( L28 ) 
  ( L27 ) BT L25 SET BE LB GN1 OUT 
  ( L24 ) 
  ( L29 ) ;

( EX1 = EX2 $('/' .OUT('BT ' *1) EX2) )
( .LABEL *1 ., )
: EX1 CLL EX2 BF L30 
  ( L31 )  "/" TST BF L32 CL "BT " GN1 OUT CLL EX2 BE 
  ( L32 ) 
  ( L33 ) BT L31 SET BE LB GN1 OUT 
  ( L30 )
  ( L34 ) ;

( ST = .ID .LABEL * '=' EX1 )
( '.,' .OUT('R')., )
: ST ID BF L35 LB CI OUT  "=" TST BE CLL EX1 BE  ".," TST BE CL "R" OUT 
  ( L35 ) 
  ( L36 ) ; 

( PROGRAM = '.SYNTAX' .ID .OUT('ADR ' *) )
( $ ST '.END' .OUT('END')., )
: PROGRAM  ".SYNTAX" TST BF L37 ID BE CL "ADR " CI OUT 
  ( L38 ) CLL ST BT L38 SET BE  ".END" TST BE CL "END" OUT 
  ( L37 ) 
  ( L39 ) ;

( .END )


