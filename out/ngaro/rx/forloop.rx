
( for loop compiler by crc: https://gist.github.com/crcx/4610280 )
( this was meant for helping with oberon compilation but i'm )
( using it in this module because i'm not up to the task of )
( translating this algorithm into retro at the moment :/ )
{{
: relop dup 2 + @ 0 > [ &<= ] [ &>= ] if ;
: start dup 4 + 1 , , ;
: goal dup 3 + 1 , , ;
: by dup 2 + 1 , , ;
: quote dup 1 + 1 , , ;
---reveal---
: for ( start goal step quote - )
  ahead [ 5 allot ] dip here over !
  quote ` ! by  ` ! goal  ` ! start ` !
  ` repeat [
     start ` @ goal ` @ relop , 0; ` drop
     start ` @ by   ` @ + start ` !
     quote ` @ ` do
  ] dip ` again
  drop ; immediate
}}



( me trying to put a more pascal-like syntax on this )
: lit,, 1 , , ;
: call , ;

( for and to do nothing, but they are immediate so nothing is compiled )
{{
: whichway dup 0 > [ &iter ] [ &iterd ] if ;
---reveal---
: .for ; immediate
: .to  ; immediate
: .by  ; immediate
: .do dup whichway ` [ ; immediate
: .next ` ] call ; immediate
}}

.for x .to .x .by .do
.end
