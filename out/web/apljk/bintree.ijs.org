#+title: bintree : binary trees

* binary trees
:PROPERTIES:
:TS:       <2014-03-05 04:03AM>
:ID:       9umevoc1ueg0
:header-args:  :exports both  :session
:END:

We will model a binary tree of depth ~n~ as an array of ~2^n~.

We'll cap the depth at 32:

#+begin_src J
  u16 =: ((2^16) & >) *. (>: & 0)     NB. y in range 0 .. 2^16 - 1 ?
  u16cap =: _:^:([: -. u16)"0         NB. replace non-u32 values with _
  assert 0 1 1 0 = u16 _1 0, _1 0 + 2 ^ 16
#+end_src

#+RESULTS:

#+begin_src J
  lf =: [: u16cap [: >: +:            NB. left child index  (1 + 2 * y)
  rt =: [: u16cap [: +: >:            NB. right child index (2 * 1 + y)
  up =: [: u16cap [: <. [: -: <:      NB. parent index (floor of half y-1)
#+end_src

#+RESULTS:


* a sparse array
:PROPERTIES:
:TS:       <2014-03-05 07:02AM>
:ID:       gvk6pe60veg0
:header-args:  :exports both  :session
:END:

This gives us a 16 bit address space to work with:
#+begin_src J
  (<:2^16) 0} (2^16) $ $. 0 0
#+end_src

#+RESULTS:
: 0 â”‚ 65535



* LINK references
:PROPERTIES:
:TS:       <2014-03-05 08:00PM>
:ID:       jja5ge61veg0
:END:
http://en.wikipedia.org/wiki/Binary_tree#Arrays
