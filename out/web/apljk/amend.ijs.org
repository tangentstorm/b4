#+title: using 'amend' in j


* replacing values that match a predicate:

#+begin_src j
     'i' ([:I.'a'=]) } 'bananas'
  bininis
     'o' ]`[@.('a'=])"0 'bananas'
  bononos
#+end_src

#+begin_src j
   'eiou'[^:('a'=])"0 0/  'apples & bananas'
epples & benenes
ipples & bininis
opples & bononos
upples & bununus
#+end_src


* replacing a substring with a larger substring.
:PROPERTIES:
:TS:       <2014-03-05 12:32AM>
:ID:       sebkuw21ueg0
:END:

We're going to want to say:

#+begin_src j
  ('a' to 'oo') 'apples & bananas'
#+end_src

So 'to' will be a conjunction, and we can asign variables like so to prototype it:

#+begin_src j
  m=:'a' [ n=:'oo' [ y=:'apples & bananas'
#+end_src

The first step is to figure out the location(s) of m in y.

#+begin_src j
     m = y
  1 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0
#+end_src

We can replace those occurances like so:

#+begin_src j
    '_' (I. m=y) } y
  _pples & b_n_n_s
#+end_src

What we /really/ want to do is put =n= in those slots, but since =n= is longer than =a=, it doesn't quite work out.

#+begin_src j
   n (I. m=y) } y
|length error
|   n    (I.m=y)}y
#+end_src

If we box each item of y, we can do it like so:

#+begin_src j
     ; n ][@.(m-:]) L:0 <"_1 y
  oopples & boonoonoos
#+end_src

But how do it without boxing?





(m=.'a') ((n=.'o') ( [: I. x=] ) } (>:@= # ]) ) y=.'apples and bananas'
ooples and boonoonoos








* sort some elements, leaving the rest in place

The idea here is we want to sort the small numbers, while leaving the =_= items  in place. (The '=_=' means "infinity".)

Here's one way to do it:

#+begin_src j

       y =. _ 2 _ _ _ 3 _ 1 _ _ 0 _
       (/:~ k { y) (;/ k=. I. _ ~: y ) } y
    _ 0 _ _ _ 1 _ 3 _ _ 2 _

#+end_src

Here's the same thing, with the filtering and aggregate verbs extracted:

#+begin_src j
  
     filter =. [: I. _ ~: ]
     filter y
  1 5 7 10
  
     sort =. /:~
     sort y
  0 1 2 3 _ _ _ _ _ _ _ _
  

    (sort k { y) (;/ k =. filter y) } y
  _ 0 _ _ _ 1 _ 2 _ _ 3 _
  
#+end_src

This version extracts the basic pattern into a conjunction (=2 : ...=) and an adverb (=1 : ...=).

#+begin_src j
      aw =. 2 : '(u k { y) (;/ k =. v y) } y'  NB. aw for 'apply where'
      ne =. 1 : 'I. m ~: y'                    NB. ne for 'not equal'
      /:~ aw ('-' ne) '--c--a--b--'
  --a--b--c--
#+end_src
