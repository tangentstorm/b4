mhook = ap  --- Cale on #haskell


also thanks to: firefly darkf

06:56:39 k00mi tangentstorm: [[0..n]|n<-[0..10]] is inits

06:56:44 Cale tangentstorm: mhook = ap
06:57:18 hpc dyco = on

06:57:18 Cale mfork = liftM2
06:57:50 Cale > liftM2 (/) (1+) (2*) 2


06:57:51 lambdabot  0.75
06:58:35 Cale > on (+) (*2) 3 5
06:58:36 lambdabot  16
06:58:52 hpc > do {x <- [0,1,2,3]; y <- [0,1,2,3]; return (x + y)}
06:58:53 lambdabot  [0,1,2,3,1,2,3,4,2,3,4,5,3,4,5,6]
06:59:54 Cale @hoogle ap
06:59:54 lambdabot Control.Monad ap :: Monad m => m (a -> b) -> m a -> m b
07:00:27 hpc > scanr (+) 0 [1..10]
07:00:28 lambdabot  [55,54,52,49,45,40,34,27,19,10,0]
07:00:39 Cale @pl mhook f g x = f x (g x)
07:00:39 lambdabot mhook = ap
07:00:41 hpc > scanl (+) 0 [1..10] -- keep forgetting scans are reversed from folds
07:00:42 lambdabot  [0,1,3,6,10,15,21,28,36,45,55]
07:01:21 Cale @pl comd f g x y = f (g x y)
07:01:21 lambdabot comd = (.) . (.)
07:02:10 hpc your mhook (+) id = join (+)
07:02:17 Cale @pl mfork f g h y = (f y) g (h y)
07:03:26 Cale well, let's write that as
07:03:36 Cale (a -> b -> c) -> m a -> m b -> m c
07:03:48 Cale Now replace m t with (e -> t)
07:04:02 Cale (a -> b -> c) -> (e -> a) -> (e -> b) -> (e -> c)
07:04:20 tangentstorm i just didn't realize a function was a Monad
07:04:26 Cale A function isn't
07:04:37 Cale The type constructor (->) e is a monad for any type e
07:08:11 FireFly > (\xs -> and (zipWith (<) (init xs) (tail xs))) [0..9]
