#+title: minrel trail

* lesson 1 : records
** DONE example: flat bookmarks db
* lesson 2 : variants
** record \rarr array of variant
** parsing variants dynamically
- numbers
- strings
- booleans / enums
** TODO example: database meta model
** reduce hard coded logic by moving from records to arrays and type descriptors
This basically involves lifting records up into the data model.
** TODO indexed properties \rarr variants
** type descriptor
** reification
[[http://en.wikipedia.org/wiki/Reification_(computer_science)][reification]]




** We want a little command language that we can extend as we go.
** TODO we'll create a unit

* Requirements
** doesn't need to be user-facing
** should be small
** should leverage the database
** need to be able to
*** create, modify, and delete relations
**** represent types
**** represent names
*** create, modify, and delete tuples
**** represent data
** general command language
** don't expect to get it right the first time
*** we want a simple language.
- lisp
- forth
- tabular
- graph-based
** simple forth-like language
*** ^B and ^C delimit quotes





* parsetable
#+begin_src pascal
  procedure parsetable;
    begin
      createTempBuf;
      for key in keys do with key do
        case keytype of
          ktString : readstring( keysize, result );
          ktCardinal : readNumber( keysize, result );
        end;
    end;
#+end_src

* later: replace case statement with dynamic lookup

#+begin_src wejal
: linearlookup
for h in handlers where h.key ~ msg.type do  !  ~ means 'matches', which could change based on type
    h.handle( msg );
#+end_src

* NOTE . how to escape from pascal
:PROPERTIES:
:TS:       <2013-05-15 01:09AM>
:ID:       jsqbem7034g0
:END:
- procedure signatures are essentially records
- records are just arrays that conform to a schema
- so procedures could just take arrays
  - to find the nth field, take the nth offset
  - these can be interpreted on the fly or compiled
  - for variable length data, use a reference
  - references also help minimize data transfer
    - but watch out for paging and the cpu cache


* COMMENT todo list
** DONE step : reify the type system
Replace the array of variants an array of bytes.
Field name, type name
*** DONE Records are fixed width. replace with arrays of bytes.
*** DONE Track the width of the column in bytes.
*** DONE The schema is described with arrays of type variables.
You could either load the schema directly from the table's file, or you could have some number of schema tables.
*** TODO Define a Database meta-model.
- tables
- column names
- types
** TODO step : replace hand-sequenced parser \rarr array of scanners
*** TODO Use the first row to learn the width of the table.

*** TODO While not Eof, use =SetLength= to generate each new array.

*** TODO Create an Array of parsers.
** TODO Make the separator character configurable.
** TODO Use TClass / RTTI published fields for tool integration.
** TODO Load tables of variants without a particular schema.
ds
ames.
sizes


* implement a command shell
* forth like dictionary

* --- later ----
** the relational algebra  (maybe split this up over time, add to appendix?)
*** implement union (OR)
*** implement intersection (AND)
*** implement filter (given a predicate function)
*** implement inner join
*** implement natural join
*** implement outer join
*** implement sorting
*** implement selection
*** implement projection

** relational extensions
*** TODO implement left join
**** 1:*
**** 1:1
**** *:1
*** hierarchical queries (transitive closure)
** compact file vs room to grow -> page model                        :cloud:
** show the conversion to triple store
** files vs arrays -> unify with IArray interface                    :cloud:
** read multiple datatypes from untyped files using BlockRead/BlockWrite
** the virtual machine
** "relational methods"                                               :arlo:
*** This is the old idea from arlo that the query language should exist /atop/ the object model, with all its behaviors and whatnot.
*** I think a relation could be treated much like a class.
*** relational methods would produce relations... it would depend on class methods.
*** views would be a type of relational method
** query planning/optimization
** model a petri net
** write a parser for ascii-delimited data
** parse org-mode tables
** implement some kindof user interface for tables
*** implement a spreadsheet-like gui in lazarus
** csv/tab import
** full text search

