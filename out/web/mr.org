#+title: mr : a tiny relational database for minneron

* overview
** GOAL a simple graph database with a strong relational bias.
- We want to store data and documents in one place.
- We want to use the relational model when possible.
  - It's always possible.
    - Some things like source code, html might even benefit.
    - Imagine querying for all the level 2 headlines in posts by a certain author between some dates.
  - But sometimes we don't actually /need/ the relational model and it can be more efficient to just use a raw graph.
    - Example: storing the NFA/DFA for a grammar.

** project breakdown
*** storing nodes, relations, arbitrary graphs
**** variable-length content gets stored as nodes:
- strings / text
- images
- audio 
- video
- compiled code
- raw binary data
**** fixed width tables are stored as relations
***** really just a special kind of blob that grows
***** each row is a fixed-size array of bytes
***** these can be converted to record structures when needed
***** booleans are stored as octets unless they can be bit packed.
**** default 3-column table (triplestore) for arbitrary graphs
**** semi-structured data can go either way
- html files
- source code
*** indexing the data
**** use a b+ tree to store locations of table/string descriptors
**** Individual columns can be indexed, just like strings.
*** paged model for database layout
**** linked list of pages
**** Links are stored in their own descriptor pages, separate from the pages. 
Mostly this just seems cleaner to me, but also:

- Pages can use an entire power-of-2-sized block for data (hopefully making pointer arithmetic slightly more efficient).

- The linked list can be walked and examined without actually loading it, so you can figure out which blocks contain a particular blob without actually loading and walking the pages. [fn:1]

**** These index pages are just sequences of integers.
These would act as a sort of parallel array to the pages themselves (the pages are contained a virtual "array" in that they're numbered sequentially within the database file). On the first index page, =item[0]= would contain the =.next= link for =page[0]=, and so on.

**** The link index can grow like any other table, and thus contains itself.
Suppose the index grows large enough that it needs to be extended, but the next block is already in use.

**** In the linked list, 0 reperesents null.
The pages are arranged in linked lists, or trees trees, but never in a loop. Therefore, there  would never be a back-link to page 0, and it's safe to use 0 to represent a link to null (and thus the end of a chain).

Zero is a nice number to compare to because many CPUs make it eazy to branch when things are zero.

Negative values might represent unused pages, or pages in need of cleanup.
**** relations with fixed-width values always start on a page boundary
this just makes it slightly simpler to do arithmetic

*** correlating data in ram : the relational algebra
*** the ACID properties
**** For working in RAM, though, we may just want to append to entries to a temporary table. This should help with [[http://en.wikipedia.org/wiki/ACID][ACID]].

* implementation
** implementing nodes
*** Nodes are just blobs of text or binary data.
*** NIds are assigned sequentially, starting at 1
*** NId \rarr Str
- Find the string entry in the descriptor table. (Easy since they're in order.)
- Use this to find the start page of the string.
- Given length, it's easy to figure out which pages to load, and then load the whole string.

*** Str \rarr NId
- This uses the string descriptor table in conjunction with a b+ tree as an index. The string is used as the comparison key for the lookup,
- since we want the string index to be ordered for sorting, probably the first 4-8 characters should be cast as an int, and if that doesn't bring us to a leaf node, use the next set of characters.
- the value stored in the b+ tree is just a pointer to the string table
** Indexing : B+ Trees
** Storing Tuples
*** Records should (could?) be stored in sequence, and updated in-place.

* Extensions
** Version Control
*** For version control, it probably makes sense to keep a running log of transactions as triples.
*** For branching,  we would annotate each triple with =.prev= pointer, to create a linked list.
*** As an optimization, the current state of the working copy would be cached as a more traditional database.
*** The old value for each change could also be stored.

* Footnotes
[fn:1] I don't know if this is useful or not yet, but it /seems/ like it might come in handy for garbage collection/defragmentation.
