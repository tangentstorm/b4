#+title: retro from the top down
#+date: [2012-10-06 Sat]
#+author: michal j wallace ( top-down commentary )
#+author: charles childers, luke parrish, marc simpson, jay skeer ( code )
#+author: charles childers (??) ( bottom-up commentary )

* part 1 : overview
** quick intro to retro

Retro is a concatenative programming language, related to forth, factor, and joy. Retro runs on a portable virtual machine called ngaro, and is self hosting, meaning it is written in itself.

The retro documentation includes a file, ~docs/Commentary.txt~, which describes the process of building a new image from the bottom up. The actual code is in the following files:

| ~image/meta.rx~     | the assembler and metacompiler     |
| ~image/meta-alt.rx~ | same thing, but from vm primitives |
| ~image/kernel.rx~   | the core retro commands            |

All code in the present file is taken from these sources, as they existed in October of 2012. 

This is a top-down view of the bootstrap process, which means that the code will not actually compile in the order presented here. Rather, the point here is to see how all the parts fit together into a unified whole.

We will start at the "top" of the retro user interface, with the listener (the "ok" prompt), briefly discuss each word we encounter, then perform a recursive descent into /its/ definition. The words will be introduced in breadth first order, but the definitions will be presented depth-first, so that we are implementing each word "just in time" for execution in the level above.

** the listener
*** =listen= the word that does what you ask it to
#+begin_src retro
t: listen  (   - ) repeat ok 32 # accept tib find process again ;
#+end_src

This is the main loop of the retro interpreter, taken from line 246 of ~kernel.rx~, just under halfway through the file. After this point, the code generates a fresh dictionary, copies the newly-generated image over the original, and performs a virtual reboot of the system.

Once we understand how the listener works, we can simply follow the ~Commentary.txt~ file from the heading "Stage 3: Extend the Language" on line 1000. Therefore, we will only concern ourselves here with this the first two phases.

*** What do all those words mean?

First, note that word =t:= is simply the standard word =:= ("colon"), which begins a definition, except that the definition gets stored in the target image. Since =t:= is the first word of a definition, it should be the first sub-node that we visit, but we will treat it as =:= and visit that instead.

So. What do the other words mean? The following definitions are taken from ~doc/Core_Functions.rst~, except for /#/ and /process/, which are invisible after the reboot, and not part of standard retro.

| :       | "-   | Calls =create=, changes class to =.word=, and turns =compiler= on                       |
| listen  | -    | Top level interpreter. Reads and process input                                    |
| (       | "-   | Parse for ) and ignore everything it reads                                        |
|---------+------+-----------------------------------------------------------------------------------|
| repeat  | -    | Start an unconditional loop                                                       |
| ok      | -    | Displays the "ok" prompt                                                          |
| 32      | -n   | /not found, so parsed as integer and pushed to data stack/                          |
| /#/       | n-   | /meta.rx: compile a literal (unnecssary after stage 3)/                             |
| accept  | c-   | Read a string, ending with the specified character. The string is returned in =tib= |
| tib     | -a   | Returns address of text input buffer                                              |
| find    | $-af | Search for a name in the dictionary. Returns a dictionary header and a flag       |
| /process/ | af-  | /kernel.rx: run the word's class handler if found, otherwise parse as number/       |
| again   | -    | Jump to the code following the most recent =repeat=                                 |
|---------+------+-----------------------------------------------------------------------------------|
| ;       | -    | Compile an exit into a function and stop the compiler                             |

We will not show the lines for =:=, =;=, or =(...)= in other definitions, but will repeat the internal definitions.

*** Understanding the stack comment.

The second column shows the /stack comment/ for each word. The following symbols are used:

| "      | indicates that the word reads input from the user or script      |
| -      | separates the input (on the left) from the output (on the right) |
| #    | /beats me./ :(                                                     |
| n      | a number                                                         |
| c      | a character                                                      |
| a      | an address                                                       |
| $    | a string                                                         |
| f      | a flag (boolean)                                                 |
|--------+------------------------------------------------------------------|
| others | it's just a comment, so sometimes ad-hoc names are used          |

The topmost item is always on the right, so for example =( ca-nf )= means "take an address, then a character off the stack, give back a number and then a flag". (Flags are almost always returned on top, so they can be easily tested with =if= .)


**** TODO what does # mean ? ( number? counted string? )
*** Summary of =listen= 

Let's take another look at =listen= then, and put it in our own words:

#+begin_src retro
t: listen  (   - ) repeat ok 32 # accept tib find process again ;
#+end_src

The listener is an *infinite loop* ( =repeat= .. =again= ) that shows a prompt ( =ok= ), reads characters from input until encountering a space ( =32 # accept= , where 32 is the ASCII code for the space character ), looks the word up in the dictionary ( =tib find= ), and then performs various possible actions, depending on whether the word was found or not, and if so, what class handler is associated with it ( =process= ).

We will now explore each of these words in detail.

** stepwise refinement and recursive descent
Having investigated the word =listen= and briefly described its component words, we are now going to give each of those words the same treatment in turn.

We will proceed depth first and left to right. Note that it's possible that a word is used in multiple places, and we may therefore need to define it earlier than the order in which we expected.

* part 2 : recursive descent
** =listen= > =: ("colon")= the word that makes new words
#+begin_src retro
t: :        ( "-  )  create ' .word # last # @, d->class !, ]] vector? ;
#+end_src
*** TODO summary
*** breakdown
#+tblname: listener
| :        | "-  | Calls =create=, changes class to =.word=, and turns =compiler= on                                         |
|----------+-----+-----------------------------------------------------------------------------------------------------|
| t:       | "-  | /meta.rx: compile to target image ( bootstrap version of/ =:= /)/                                         |
| create   | "-  | Parse for a name and call =header=                                                                    |
| '        | n-  | Place TOS =here= and increment =heap= by 1                                                              |
| .word    | a-  | Class for normal functions                                                                          |
| /#/        |     |                                                                                                     |
| last     | -a  | Variable; pointer to most recent dictionary header                                                  |
| @,     | -   | /meta.rx: assembler for @ (which fetches a value from the address at TOS)/                            |
| d->class | a-a | Given a dictionary header, return the address of the class handler. Use =@= to get the class handler. |
| !,       | -   | /meta.rx: assembler for ! (which stores a value to the address at TOS)/                               |
| ]]       | -   | Turn compiler on                                                                                    |
| /vector?/  | -   | /kernel.rx: either revectors the word immediately or writes two NOPs for revectoring later/           |

** TODO =:= > =t:= the compiler's compiler
#+begin_src retro
: t: ( "- ) label: nop, nop, &m, reclass ;
#+end_src

** TODO =t:= > =label:= 
** TODO =t:= > =&m,= 
** TODO =t:= > =reclass=
** TODO =listen= > =( ("paren")= the word that doesn't care what you say
** TODO =:= > =create= 
** TODO =:= > =' the quote
** TODO =listen= > =.word= 
** TODO =listen= > =#= proto literals
** TODO =listen= > =last= at =last=, you find the words
** TODO =listen= > =@,== assemble and follow me
** TODO =listen= > =d->class= pointer arithmetic
** TODO =listen= > =!, take that, NOS!
** TODO =listen= > =]]= 
** TODO =listen= > =vector?=  =vector?= +I hardly know her.+
** TODO =listen= > =;= STOP THE PRESS!

** =listen= > ( paren ) # should have been done by this point
** TODO =listen= > =repeat= the word that's just getting started
#

** TODO =listen= > =ok= the word that lets you know everything is ok
#+begin_src retro
t: ok      (   - ) compiler # @, not 0; drop, cr okmsg # puts ;
#+end_src

** TODO =listen= > =32= the word that wasn't here
#

** TODO =listen= > =accept= the word that wants you to show some character
** TODO =listen= > =tib= the word that holds what =listen= heard
#

** TODO =listen= > =find= the word that reads the dictionary
#
** TODO =listen= > =process= the hidden word that makes the whole thing work
#+begin_src retro
i: process ( af- ) 0 # !if xt:class jump: withClass then drop jump: number
#+end_src

** TODO =listen= > =again= the word that picks up after =repeat=


* TODO scraps (put these in the right place as we go along)
#+begin_src retro
i: number  (   - ) tib isNumber? 0 # !if jump: build# then jump: notFound
i: build#  (   - ) tib toNumber ' .data # jump: withClass
#+end_src

