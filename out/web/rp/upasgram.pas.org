#+title: pascal grammar components
#+date: <2013-11-04 Mon>

* Retro Pascal Grammar Components

In retro pascal, all code lives in some sort of module, which (at the very least) has a /name/, a list of /imports/, a number of /declarations/, and then a /block/ of code.

This is an abstract description of the outermost part of the retro pascal grammar, and therefore the topmost node in a parse tree. It's "abstract" because it omits any details about the actual syntax used. It contains only the information relevant to a compiler or interpreter.

We can specify this more formally by creating a class in object pascal:

#+name: type:TModule
#+begin_src pascal

  type
    TModule = class (TSyntaxNode, IModule)
      protected
        _iden    : IIden;
        _imports : GArray<TImport>;
        _decls   : GArray<IDecl>;
      published
        property iden    : IIden read _iden;
        property imports : GArray<TImport> read _imports;
        property decls   : GArray<IDecl> read _decls;
        property block   : TBlock;
      end;

#+end_src

None of the referenced types are peredefined -- we'll fill them in as we go along, through a process of stepwise refinement.

We will put off defining =TSyntaxNode= (and its associated interface, =ISyntaxNode=) until the end. For now, we can use a pair definitions that do nothing bu define a =kind= property. This is basically a way to implement

#+name: type:xSyntaxNode
#+begin_src pascal

  type { temporary definitions }

    ISyntaxNode = interface
      function GetKind : integer;
      property kind : integer read GetKind;
    end;

    TSyntaxNode = class (TComponent, ISyntaxNode)
      public
        function GetKind : integer;
      published
        property kind : integer read GetKind;
      end;

#+end_src

Eventually we will add methods and properties to this interface, and all the nodes in the tree will implement it.

The =IModule= interface is mostly just so we can refer to it from the definition for the =TImport= class below. In general, when we need to create cyclic relationships between types, we will use interfaces to break the cycle. (We could also use forward class declarations. This is just my personal preference.)

#+name: type:IModule
#+begin_src pascal
  type
    IModule = interface (ISyntaxNode) end;
#+end_src

With these in place, we can now fill in the next few declarations.

I'm making heavy use of properties here because I'd like to take advantage of runtime type information. And possibly even provide some design time components for working with these nodes in Lazarus.

#+name: type:TModuleDeps
#+begin_src pascal
  type

    IIden = interface (ISyntaxNode)
      function GetName : string;
      property name : string read GetName;
    end;

    IDecl = interface (IIden)
      function GetDefn : ISyntaxNode;
      property defn : ISyntaxNode read GetDefn;
    end;

    TDecl = class (TSyntaxNode, IDecl)
      published
        function GetName : String;
        function GetDefn : ISyntaxNode;
      end;

    { A module name, with optional abbreviation. }
    TImport = class (TDecl)
      public
        property abbrev : IIden;
        property module : IModule;
      end;

    IStmt = interface (ISyntaxNode)
    end;

    TBlock = class (TSyntaxNode, IStmt)
      published
        stmts : GArray<IStmt>;
      end;

#+end_src

** Statement Nodes

There are several kinds of =IStmt= besides =TBlock=.

#+name: type:xStatement
#+begin_src pascal

  type

    IExpr = interface end;
    ILhsExpr = interface (IExpr) end;
    IOrdExpr = interface (IExpr) end;
    IBoolExpr = interface (IExpr) end;

    TAssignStmt = class
      protected
        _lhs : ILhsExpr;
        _rhs : IExpr;
      published
        property lhs : ILhsExpr read _lhs;
        property rhs : IExpr read _rhs;
      end;

    TIfThenStmt = class
      protected
        _cond : IBoolExpr;
        _then,
        _else : IStmt;
      published
        property cond     : IBoolExpr read _cond;
        property thenPart : IStmt read _then;
        property elsePart : IStmt read _else;
      end;

    TCasePair   = class (TSyntaxNode)
      protected
        _expr : IExpr;
        _stmt : IStmt;
      published
        property expr : IExpr read _expr;
        property stmt : IStmt read _stmt;
     end;

    TCaseStmt   = class (TSyntaxNode)
      protected
        _expr  : IStmt;
        _cases : GArray<TCasePair>;
      published
        property expr : IExpr;
        property cases : GArray<TCasePair> read _cases;
      end;

    TWhileDoStmt  = class (TSyntaxNode)
      protected
        _cond : IBoolExpr;
        _stmt : IStmt;
      published
        property cond : IBoolExpr read _cond;
        property stmt : IStmt read _stmt;
      end;

    TRepeatUntilStmt  = class (TSyntaxNode)
      protected
        _stmt : IStmt;
        _cond : IBoolExpr;
      published
        property stmt : IStmt read _stmt;
        property cond : IBoolExpr read _cond;
      end;

    TForDirection = (forUpTo, forDnTo);

    TForToStmt  = class (TSyntaxNode)
      protected
        _stmt : IStmt;
        _cond : IBoolExpr;
        _dir  : TForDirection;
      published
        property stmt : IStmt read _stmt;
        property cond : IBoolExpr read _cond;
        property direction : TForDirection read _dir;
      end;

    { In ISO pascal, LABEL and GOTO use numbers.
      Borland-style dialects allow labels to be strings.

      I think for the purposes of this component hierarchy tree,
      I will just pretend that numbers are identifiers, even
      though that's not true syntactically in pascal. }

    TLabelDef = class (TDecl) end;

    TGotoStmt  = class (TSyntaxNode)
      protected
        _target : variant;
      published
        property target : variant read _target;
      end;

#+end_src

** Expression Nodes

#+name: type:xExpression
#+begin_src pascal

  type
    TDyadOp    = (opEQ, opLT, opGT, opNE, opLE, opGE, opIN, opOR, opAnd,
                  opPlus, opMinus, opTimes, opRDiv, opMod, opDiv);
    TMonadOp   = (opNot, opPos, opNeg, opAddr);

    TDyadExpr  = class (TSyntaxNode, IExpr)
      protected
        _op : TDyadOp;
        _x  : IExpr;
        _y  : IExpr;
      published
        property op : TDyadOp read _op;
        property x  : IExpr read _x;
        property y  : IExpr read _y;
      end;

    TMonadExpr = class (TSyntaxNode, IExpr)
      protected
        _op : TMonadOp;
        _y  : IExpr;
      published
        property op : TMonadOp read _op;
        property y  : IExpr read _y;
     end;

    IValue = interface (IExpr) end;

    TIdenRef = class (TSyntaxNode, IValue)
      protected
        _iden : IIden;
      published
        property iden : IIden read _iden;
      end;

    TLiteral = class (TSyntaxNode, IValue)
      protected
        _str : string; { Actual token used. (ex: '$FF' vs '255') }
        _val : variant;
      published
        property text : string read _str;
        property value : variant read _val;
      end;

    IRange = interface (IValue)
      function GetLo : IOrdExpr;
      function GetHi : IOrdExpr;
      property lo : IOrdExpr read GetLo;
      property hi : IOrdExpr read GetHi;
    end;

    TRange = class (TSyntaxNode, IRange)
      protected
        _lo : IOrdExpr;
        _hi : IOrdExpr;
      published
        function GetLo : IOrdExpr;
        function GetHi : IOrdExpr;
        property lo : IOrdExpr read GetLo;
        property hi : IOrdExpr read GetHi;
      end;

    TSet = class (TSyntaxNode, IValue)
      protected
        _members : GArray<IValue>;
      published
        property members : GArray<IValue> read _members;
      end;

#+end_src


** type definitions

#+name: type:xTypeDefs
#+begin_src pascal

  type
    IType = interface (IDecl) end;
    TTypeDef = class (TDecl, IType) end;

    TTypeDecorator = class (TTypeDef)
      protected
        _base : IType;
      published
        property base : IType read _base;
      end;

    TAliasType = class (TTypeDecorator)
      protected
        { all this does is defines a new name for the base type. }
      end;

    TPointerType = class (TTypeDecorator)
      protected
      end;

    { We'll use this for both arrays and records. }
    IPackable = interface
      function GetPacked : boolean;
      procedure SetPacked(flag : boolean);
      property isPacked : boolean read GetPacked write SetPacked;
    end;

    TArrayType = class (TTypeDecorator, IPackable)
      protected
        _ranges : GArray<IRange>;
        _packable : IPackable;
      published
        property packinfo : IPackable read _packable implements IPackable;
        property ranges : GArray<IRange> read _ranges;
      end;

    TRangeType = class (TTypeDef, IRange)
      protected
        _range : TRange;
      published
        property range : TRange read _range implements IRange;
      end;

#+end_src


** grouped declarations (multiple symbols joined by ',')

There are a number of places in the pascal grammar where you can declare a number of identifiers of the same type, separated by commas:

- enumerated types
- record definitions
- =var= sections
- parameter lists in procedure declarations

#+name: type:xTypeDefs
#+begin_src pascal
  type

    ITyped = interface
      function GetTypeRef : IType;
      property typeRef : IType read GetTypeRef;
    end;

    TTypedDecl = class (TDecl, ITyped)
      protected
        _typeRef : IType;
      published
        function GetTypeRef : IType;
        property typeRef : IType read GetTypeRef;
      end;

    TGroupDecl = class (TTypedDecl)
      protected
        _decls : GArray<ITyped>;
      published
        property decls : GArray<ITyped> read _decls;
      end;

#+end_src

** record and procedure types

#+name: type:xTypeDefs
#+begin_src pascal
  type

    TEnumType = class (TGroupDecl) end;

    TRecordType = class (TTypeDef)
       protected
         _groups   : GArray<TGroupDecl>;
         _tagField : TDecl;
         _variants : GArray<TGroupDecl>;
         { !! The tagField/variants properties are very rough here.
              I will probably refine them when it comes time to
              actually implement variant records. }
       published
         property groups   : GArray<TGroupDecl> read _groups;
         property tagField : TDecl read _tagField;
         property variants : GArray<TGroupDecl> read _variants;
       end;

#+end_src

** variable, constant, and label definitions

#+name: type:xValueDefs
#+begin_src pascal

  type

    TValDef = class (TTypedDecl)
    end;

    TVarDef = class (TTypedDecl)
    end;

    TConstDef = class (TTypedDecl)
    end;

#+end_src


** procedure and function definitions

#+name: type:xProcDefs
#+begin_src pascal
{ todo : procedure and function defs }
#+end_src


* implementation

#+name: @methods
#+begin_src pascal

  function TSyntaxNode.GetKind : integer;
    begin
      result := 0
    end;

  function TTypedDecl.GetTypeRef : IType;
    begin
      result := _typeRef
    end;

  function TDecl.GetName : string;
    begin
      result := ''
    end;

  function TDecl.GetDefn : ISyntaxNode;
    begin
      result := nil
    end;

{ -- ranges -- }

  function TRange.GetLo : IOrdExpr;
    begin
      result := _lo
    end;

  function TRange.GetHi : IOrdExpr;
    begin
      result := _hi
    end;


#+end_src

* ouput ( upasgram.pas )

#+begin_src pascal :tangle "~/r/retropas/upasgram.pas" :comments both :noweb tangle
  {$mode delphi}
  unit uPasGram;
  interface uses classes, arrays;
    <<type:xSyntaxNode>>
    <<type:IModule>>
    <<type:TModuleDeps>>
    <<type:TModule>>
    <<type:xStatement>>
    <<type:xExpression>>
    <<type:xTypeDefs>>
    <<type:xValueDefs>>
    <<type:xProcDefs>>
  implementation
    <<@methods>>
  end.
#+end_src
