#+title: parsers

* overview of parsing

A parser recognizes text in a particular language, and (usually) does something with it. In our case, we will describe the language to parse by defining a grammar, and instruct the parser to build a tree.

We will construct our parser as a simple virtual machine.

- Decide how to represent trees.
- Provide procedures for building the trees.
- Provide a way to walk the trees.
- Model the grammar as a tree.
- Walk the grammar tree to parse the code.


* how to represent trees
* procedures for building trees
* procedures for walking the trees

* inspection

/how does walking the grammar tree work, in general?/

walk each rule from left to right, just like forth words

/what about optional / repeat keywords?/

either use a prefix or a retro-style quotation.

/what does the prefix / quotation do?/

Sometimes we need to alow the pattern we're matching to fail locally. Like for =/a*b/= we want to match any number of ~a~ characters, including zero. So we might attempt to match ~a~ and fail, but the pattern as a whole can still pass.

On the other hand, we could forget about this idea of 'attempting' to match something, and instead just say what happens when a particular character or token shows up.

If we use that approach, then for this regexp, there are only three cases to consider: ~a~, ~b~, and anything else.

* a simple classifier tool

suppose i have a handful of mutually exclusive predicates... as in verbs that always return either 0 or 1...

how would i turn that into a classifier?

here's an example with only one verb: suppose i'm matching a regular expression like  /a*b/

so this matches 'b' and 'ab' and 'aaaab' but not 'c'. in short, any number (0.._) of 'a' characters, followed by a 'b'

so if i'm looking at the next input character, there are 3 cases:

#+begin_src j
     i. ] 'a','b','c'
  0 1 2
     'ab' i. ] 'a','b','c','d'
  0 1 2 2
#+end_src

so this classifies the input character into one of 3 bins.

but now maybe i want to add a fourth bin for numbers.

#+begin_src j
     (e.&'0123456789') 'abc012'
  0 0 0 1 1 1
     (e.&'0123456789')`('a'=])`('b'=])`:0"0 'abc012'
  0 1 0
  0 0 1
  0 0 0
  1 0 0
  1 0 0
#+end_src

what i want it to return is: =1 2 3 0 0 0=  or maybe  =2 3 0 1 1 1=
that is, either index of the rule that matched, with =(1+#m)= for no match, or =1+= the rule that matched, with =0= for no match.

#+begin_src j
     +/"1 [ 1 2 3 *"1 (e.&'0123456789')`('a'=])`('b'=])`:0"0'abc012'
  2 3 0 1 1 1
#+end_src

That'll work. :)

#+begin_src j
    classify =: 4 :'+/"1 (>:i.#x) * x:`0 y'"1 _1
    (e.&'0123456789')`('a'=])`('b'=]) classify 'abc012'
  2 3 0 1 1 1
#+end_src

* how exactly does the tree get built?

We walk the input and return the next state.

* what happens when the input does not match?

-



* one possible general approach

- represent grammars as a set of instructions for a virtual machine
- basic instructions for:
  - matching strings
  - building trees
  - managing the parser state
  - assigning variables

enter rule: 
  create node if attributes are set.
  allocate storage for data

stack frames
for each item in sequence:
  - attempt to match
  - if match fails, 


* metagrammar (inspired by antlr)
#+begin_src antlr
grammar meta;

tokens OPT, REP, ORP, SEP, TAG ;

gram [$name:tok; $super:tok?; $rules:def*]
: 'grammar'^ $name=IDEN $super=super? ';'!
  $rules=def* ;

def [$name:tok; $rule:$seq ]
: $name=IDEN attrs? ':'! $alts=alt ';'! ;

alt : seq / '|' > ALT ^ ;
seq : ( ( grp | lit | sub | var )
        ( '?' > OPT  ^
        | '*' > REP  ^
        | '+' > ORP  ^
        | '^' > LIFT ^
        | '>' > VIRT ^
        | '!' > DROP ^
        )^*
      )* ;
grp : > GRP ^ '('! alt ')'! ;
var : ( grp | lit | sub )

IDEN : (Under|Alpha) (Under|Alpha|Digit)* ;

Alpha fragment : 'a'..'z' | 'A' ..'Z' ;
Digit fragment : '0'..'9' ;
Under fragment : '_' ;

todo: 'super ^ [$name,name:type;] /sep

#+end_src


