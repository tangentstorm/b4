#+title: mini-rosetta

These are all comparisons of J, haskell, and nial for now.

* definitions
:PROPERTIES:
:TS:       <2014-05-29 09:34PM>
:ID:       tgl671b1zhg0
:END:

** haskell
#+begin_src haskell
  import Data.List (sort)
  import Data.Function (on)

  -- reflexive transform
  rfx f y = f y y

  -- monadic hook and fork
  mfk f g h y = (f y) `g` (h y)
  mhk = mfk id
#+end_src

** nial
#+begin_src nial :exports both

  id is pass

  % reflexive transform;
  rfx is tr f op y {f y y }

  % monadic hook and fork;
  mhk is tr   g h op y {    y  g (h y) }
  mfk is tr f g h op y { (f y) g (h y) }

  square is (2 converse power)
#+end_src


* running total of first 10 cardinals

#+begin_src J :exports both
  +/\ >: i.10  NB. >: is 1+, '+/' is sum, '\' is scan
#+end_src
#+RESULTS:
: 1 3 6 10 15 21 28 36 45 55

#+begin_src haskell
  Prelude> scanl1 (+) [0..10]
  [1,3,6,10,15,21,28,36,45,55]
#+end_src

#+begin_src nial :exports both
  accumulate + count 10
#+end_src
#+RESULTS:
: 1 3 6 10 15 21 28 36 45 55


* addition table for the numbers ~0 1 2 3~

#+begin_src J :exports both
  +/~i.4
#+end_src
#+RESULTS:
: 0 1 2 3
: 1 2 3 4
: 2 3 4 5
: 3 4 5 6

#+begin_src haskell
  Prelude> let tbl f xs=[[f x y|x<-xs]|y<-xs]
  Prelude> tbl(+)[0..3]
  [[0,1,2,3],[1,2,3,4],[2,3,4,5],[3,4,5,6]]
#+end_src

#+begin_src nial :exports both
  rfx outer + 0 1 2 3
#+end_src
#+RESULTS:
: 0 1 2 3
: 1 2 3 4
: 2 3 4 5
: 3 4 5 6


* repeat an operation n times

This is just doubling a number 5 times, which is the same as multiplying by 32, but it illustrates the concept:

#+begin_src J :exports both
  +~^:5 [ 1  NB. +~ (reflexive addition) is also  +: (double) in j
#+end_src
#+RESULTS:
: 32

#+begin_src haskell
  Prelude> let pow = (\n f -> if n == 0 then id else f . pow (n-1) f)
  Prelude> pow 5 (rfx (+)) 1
  32
#+end_src

#+begin_src nial :exports both
  5 fold rfx + 1
#+end_src
#+RESULTS:
: 32

* three-verb forks (monadic)

#+begin_src J :exports both
  (>: % +:) 2
#+end_src
#+RESULTS:
: 0.75

#+begin_src haskell
  Prelude> mfk (1+)(/)(2*) 2
  0.75
#+end_src

#+begin_src nial :exports both
  /[1 +, 2 *] 2
#+end_src
#+RESULTS:
: 0.75

* check whether a series is strictly ascending

** comparing the list to its sorted version
:PROPERTIES:
:TS:       <2014-05-29 10:07PM>
:ID:       q61bqkc1zhg0
:END:
#+begin_src J :exports both
  (-: /:~) i.10
#+end_src
#+RESULTS:
: 1

#+begin_src haskell
  Prelude Data.List> mhk (==) sort [0..9]
  True
#+end_src


#+begin_src nial :exports both
  =[id,sortup] count 10
#+end_src
#+RESULTS:
: l

** comparing (all but first item) to (all but last item)
:PROPERTIES:
:TS:       <2014-05-29 10:07PM>
:ID:       7z802lc1zhg0
:END:
#+begin_src J :exports both
   *./ (}: < }.) i.10    NB. all (behead < curtail) i.10
#+end_src
#+RESULTS:
: 1

#+begin_src haskell
  Prelude> and $ (mfk tail (zipWith (<)) init) [0..9]
  True
#+end_src

#+begin_src nial :exports both
  and <[front,rest] count 10
#+end_src
#+RESULTS:
: l

* hooks (monadic)

Yet another way to double a number:

#+begin_src J :exports both
  (+[) 5
#+end_src
#+RESULTS:
: 10

#+begin_src haskell
  Prelude> mhk (+) id 5
  10
#+end_src

#+begin_src nial :exports both
  mhk[+,id] 5
#+end_src
#+RESULTS:
: 10




* apply a function to each argument, then a second function to the results
:PROPERTIES:
:TS:       <2014-05-29 10:53PM>
:ID:       428ci5000ig0
:END:

#+begin_src J :exports both
  5 (+ & *:) 6   NB. '&' is 'atop' ... '*:' is square
#+end_src
#+RESULTS:
: 61

#+begin_src haskell
  Prelude Data.Function> on (+) (^2) 5 6
  61
#+end_src

#+begin_src nial :exports both
  % '+' is already "binary pervasive";
  + square 5 6
#+end_src
#+RESULTS:
: 61

* zip list of functions with list of  arguments and evaluate each.
:PROPERTIES:
:TS:       <2015-01-24 08:17AM>
:ID:       yuleohx0rqg0
:END:

#+begin_src J :exports both
  team =: dyad : 'x :0 y' "_1
#+end_src


#+begin_src haskell :exports both
  let team a b = map (uncurry ($)) $ zip a b in team [(+1),(*2)] [3,4]
#+end_src

#+RESULTS:
| 4 | 8 |

Amazingly, this reduces to:

#+begin_src haskell :exports both
  (zipWith id) [(+1),(*2)] [3,4]
#+end_src

#+RESULTS:
| 4 | 8 |

