#+title: ar.pas : Array interface
#+INFOJS_OPT: view:showall toc:nil

* The IArray Interface

Previously, we looked at the [[https://github.com/tangentstorm/xpl/blob/master/code/sq.pas][sq unit]], in which we defined a generic sequence type, whose interface looked like this:

#+begin_src pascal
  type generic ISequence<tKey, tVal> = interface
    function Length : cardinal;
    function GetItem( i : tKey ) : tVal;
    procedure SetItem( i : tKey; var value : tVal );
    property item[ i : tKey ] : tVal
      read GetItem write SetItem; default;
  end;
#+end_src

We further provided an abstract class, =GSeq<tKey,tVal>=, which provides an enumerator for classes implementing =ISequence=. This allows us to loop through the values of a sequence with pascal's =for ... in ... do= syntax.

An array is a specific type of sequence that uses a continuous range of values for its keys.

Arrays in standard pascal can have arbitrary start and end indices (that is, you can declare an =array[ -5 .. 237 ]= if you like, or =array['a'..'z']=, or even =array[byte]=, which translates to =array[0..255]=, the range of the =byte= type.

However, most of the time, it's sufficient to range from zero to some maximum value, and in fact this is how dynamic arrays work in object pascal, thus we can define an interface that works very much like a dynamic array simply by specializing =ISequence= and using =cardinal= as the key type:

#+name: type:IArray
#+begin_src pascal
  type
    IArray<T> = interface (ISequence<cardinal, T>)
      procedure Resize( newlen : cardinal );
      procedure Append( value : T );
    end;
#+end_src

Remember, =T= is a type variable, indicating some particular but as-yet unspecificred type, as if we'd declared an =array of T=.

The two additional methods we've added indicate that we will concern ourselves here with /dynamic/ arrays, which can grow and shrink at runtime, rather than having fixed bounds.

Object pascal offers dynamic arrays, which are basically the same as static arrays, except they're allocated on the heap. You can resize them with =SetLength=, but since this can copy the entire array each time you resize it, it's not always efficient to grow the array.

Since keys in an array are a contiguous sequence of values, arrays generally store their values in a single contiguous block of RAM. This allows the compiler to use simple pointer arithmetic under the hood to
allow very fast access to the data.

Sometimes, though, we prefer something that looks and feels like an array, but uses some other kind of storage system underneath. In this unit, we'll explore several classes that all implement this same interface, but have very different implementations under the hood.

* A simple test suite.

The compiler will check that each of our array classes provides the necessary methods to implement =IArray=, but it can't guarantee that the implementation actually does what we want.

Actually, nothing short of a formal proof can guarantee that our software is correct (and then only if we trust both the compiler and our logic), but we can at least provide evidence that it's probably doing the right thing.

To that end, we will run each class through the following test suite, which simply creates and populates an array.

#+name: check_array
#+begin_src pascal

  type
    ICardinalArray = IArray<cardinal>;

  procedure check_array( a : ICardinalArray );
    var i : byte;
    begin

      { test that we can grow the array with append: }
      chk.equal( 0, a.length );
      for i := 0 to 127 do a.append( i * i );

      chk.equal( 128, a.length );

      { now resize and make sure we can both read the
        old values and write the new slots }
      a.resize( 256 );
      for i := 255 downto 128 do
        begin
          { writeln( 'a[', i, '] := a[', 256 - i - 1, '] -> ',
            a[ 256 - i - 1 ], ' -> ', i, ' ',
            round(sqrt( a[ 256 - i - 1 ]))); }
          a[ i ] := round(sqrt( a[ 256 - i - 1 ]));
        end;

      { do a few spot tests to make sure it worked right. }
      chk.equal( a[   0 ],     0 );
      chk.equal( a[  64 ],  4096 );
      chk.equal( a[ 126 ], 15876 );
      chk.equal( a[ 127 ], 16129 );
      chk.equal( a[ 128 ],   127 );
      chk.equal( a[ 129 ],   126 );
      chk.equal( a[ 192 ],    63 );
      chk.equal( a[ 255 ],     0 );
    end;

#+end_src

* Implementations
** DONE GAbstractArray

GAbstractArray is a partial implementation of the interface. It doesn't actaluly store any data and thus can't be used on its own, but it gives us a place to put common code that we will reuse for all the full implementations.

The first batch of methods deal with routine maintenance on the =_length= field.

#+name: ar:imp
#+begin_src pascal

  constructor GAbstractArray<T>.Create( len : cardinal );
    begin
      _length := len;
    end;

  procedure GAbstractArray<T>.CheckRange( ix : cardinal );
    begin
      if ix >= _length then
        raise ERangeError.Create( 'Out of range: ' + IntToStr( ix ));
    end;

  procedure GAbstractArray<T>.Resize( len : cardinal );
    begin
      _length := len;
    end;

  function GAbstractArray<T>.Length : cardinal;
    begin
      result := _length;
    end;
#+end_src

We can now previde a generic version of =Append= usable by all the subclasses.

#+name: ar:imp
#+begin_src pascal
  procedure GAbstractArray<T>.Append( value : t );
    begin
      self.Resize( _length + 1 );
      { -1 because length has now increased by one }
      self[ _length - 1 ] := value;
    end;
#+end_src

** DONE GDynArray

Our first implementation simply wraps the normal dynamic arrays that Free Pascal already provides. =GDynArray= offers no practical benefit for users /except/ that it conforms to our interface, and thus will work with any other code we write to that interface.

However, it does provide a good baseline sanity check for our tests and a simple reference implementation of the interface.

#+name: ar:imp
#+begin_src pascal

  constructor GDynArray<T>.Create( len : cardinal );
    begin
      inherited Create( len );
      SetLength( _array, len );
    end;

  procedure GDynArray<T>.Resize( len : cardinal );
    begin
      inherited Resize( len );
      SetLength( _array, len );
    end;

  function GDynArray<T>.GetItem( ix : cardinal ) : T;
    begin
      CheckRange( ix );
      result := _array[ ix ];
    end;

  procedure GDynArray<T>.SetItem( ix : cardinal; const val: T );
    begin
      CheckRange( ix );
      _array[ ix ] := val
    end;

  destructor GDynArray<T>.Destroy;
    begin
      _array := Nil
    end;

#+end_src

** DONE GFileArray

=GFileArray= operates on a disk file: items are loaded to and from =file=. Usually, this corresponds to a binary file on disk somewhere, but files are implemented much like classes in pascal (in that their behavior is defined by a record that contains functon pointers) so other implementations are also possible.

Note that the tight coupling to the disk makes =GFileArray= somewhat slower than other options. This class is designed for use with our database, and in conjunction with =GCachedArray=, defined next.

In most cases, if you need to save an array to disk, it's probably better to write the whole thing to disk at once, and just work with a cached copy in ram.

#+name: ar:imp
#+begin_src pascal

  constructor GFileArray<T>.Create( var f : file );
    begin
      _file := f;
      inherited Create( filesize( f ) div sizeOf( T ));
    end;

  procedure GFileArray<T>.Resize( len : cardinal );
    var n : cardinal; buf : T;
    begin
      if len < _length then
        begin
          seek( _file, filesize( _file ));
          truncate( _file );
        end
      else if len > _length then
        begin
          seek( _file, filesize( _file ));
          buf := default( T );
          for n := _length to len do
            BlockWrite( _file, buf, sizeOf( T ));
        end;
      // else do nothing
      inherited Resize( len );
    end;

  function GFileArray<T>.GetItem( ix : cardinal ) : T;
    begin
      seek( _file, ix * sizeOf( T ));
      BlockRead( _file, result, sizeof( T ));
    end;

  procedure GFileArray<T>.SetItem( ix : cardinal; const val: T );
    begin
      seek( _file, ix * sizeOf( T ));
      BlockWrite( _file, val, sizeof( T ));
    end;

  destructor GFileArray<T>.Destroy;
    begin
      Close( _file );
    end;

#+end_src

** TODO GCachedArray
** TODO GBPlusArray
#+name: ar:imp
#+begin_src pascal

  constructor GBPlusArray<T>.Create( len : cardinal );
    begin
      inherited Create( len )
      bp.TTree.Create;
    end;

  function GBPlusArray<T>.GetItem( ix : cardinal ) : T;
    begin
       result := default( t )
    end;

  procedure GBPlusArray<T>.SetItem( ix : cardinal; const val: T );
    begin
    end;

  destructor GBPlusArray<T>.Destroy;
    begin
    end;

#+end_src

** TODO GEmbeddedArray
#+name: ar:imp
#+begin_src pascal

  constructor GEmbeddedArray<T>.Create( a : IArray<T>; len : cardinal );
    begin
      inherited Create( len )
    end;

  function GEmbeddedArray<T>.GetItem( ix : cardinal ) : T;
    begin
       result := default(t)
    end;

  procedure GEmbeddedArray<T>.SetItem( ix : cardinal; const val: T );
    begin
    end;

  destructor GEmbeddedArray<T>.Destroy;
    begin
    end;

#+end_src


* Appendix: Templates for Generated Files
** template for UNIT =ar=
#+begin_src pascal :tangle "~/b/mr/code/ar.pas" :noweb tangle
  {$mode delphi}
  unit ar; { Array interface }
  interface uses sq, sysutils, bp;

    <<type:IArray>>

    type
      GAbstractArray<T> = class ( GSeq<cardinal, T>, IArray<T> )
        protected
          _length : cardinal;
          procedure CheckRange( ix : cardinal );
        public
          constructor Create( len : cardinal );
          function Length : cardinal; override;
          procedure Resize( len : cardinal ); virtual;
          procedure Append( value : t ); virtual;
        end;

      GDynArray<T> = class( GAbstractArray<T> )
        protected
          _array : array of T;
        public
          constructor Create( len : cardinal );
          function GetItem( ix : cardinal ) : T; override;
          procedure SetItem( ix : cardinal; const val: T ); override;
          procedure Resize( len : cardinal ); override;
          destructor Destroy; override;
        end;

      GFileArray<T> = class( GAbstractArray<T> )
        protected
          _file : file;
        public
          constructor Create( var f : file );
          procedure Resize( len : cardinal );
          function GetItem( ix : cardinal ) : T; override;
          procedure SetItem( ix : cardinal; const val: T ); override;
          destructor Destroy; override;
        end;

      GBPlusArray<T> = class( GAbstractArray<T> )
        protected
          _tree : bp.TTree<T>;
        public
          constructor Create( len : cardinal );
          function GetItem( ix : cardinal ) : T; override;
          procedure SetItem( ix : cardinal; const val: T ); override;
          destructor Destroy; override;
        end;

      GEmbeddedArray<T> = class( GAbstractArray<T> )
        public
          constructor Create( a : IArray<T>; len : cardinal );
          function GetItem( ix : cardinal ) : T; override;
          procedure SetItem( ix : cardinal; const val: T ); override;
          destructor Destroy; override;
        end;

  implementation
    <<ar:imp>>
  end.

#+end_src

** template for test suite
#+begin_src pascal :tangle "~/b/mr/test/test_ar.pas" :noweb tangle
  {$mode delphi}
  {$i test_ar.def}
  implementation
  uses ar, fs, sysutils;

  <<check_array>>
  type
    TDynArray      =  class (GDynArray<cardinal>, ICardinalArray);
    TFileArray     =  GFileArray<cardinal>;
    TBPlusArray    =  GBPlusArray<cardinal>;
    TEmbeddedArray =  GEmbeddedArray<cardinal>;

  procedure test_dynarray;
    begin
      check_array( TDynArray.Create( 0 ));
    end;

  procedure test_filearray;
    var f : file of cardinal;
    begin
      fs.update( f, 'test_ar.b4sd' );
      check_array( TFileArray.Create( f ));
    end;

  procedure test_bplusarray;
    begin
      check_array( TBPlusArray.Create( 0 ));
    end;

  procedure test_embeddedarray;
    begin
      check_array( TEmbeddedArray.Create( TDynArray.Create( 1024 ), 32 ));
    end;

  begin
  end.
#+end_src
#+title: minrel : a small relational graph database
#+INFOJS_OPT: view:plain toc:nil up:/ home:/

* [0/4] Block Array Layers
Next, we will build up a series of layers, all of which implement =IArray<TBlock>=:

- =TBlockFile= :: raw sequences on disk (file of TBlock). This is optional, because we can also use in-memory databases.
- =TBlockTree= :: A sparse array of blocks in RAM (using a B+ tree for fast access)
- =TBlockChain= :: Wraps a linked list of non-contiguous blocks from any =IArray<TBlock>=, and makes it appear contiguous. (The links are stored in their own =TBlockChain=, of course.)

Probably there's nothing block-specific about the first two, so they may wind up being generic.

** types and constants
#+begin_src pascal
  const
    kBlockSize = 1024; // bytes
  type
    TArray = array of int32;
    tuple = array of variant;
    TBlockID = cardinal;
    TStringID = cardinal;
    TTupleID = cardinal;
    TNodeID = cardinal;
    TEdgeID = TTupleID;
#+end_src

** TODO TBlockFile
- tdrive/tblock: =sd.pas= / =sd_fpc.inc= / =test_sd.pas=
- [[https://github.com/sabren/b4/blob/master/go/bed.pas][bed.pas]] shows the usage
#+begin_src pascal
  type TBlockFile = specialize TFileArray<Block>;
#+end_src

** TODO TBlockTree
#+begin_src pascal

  constructor TBlockTree.Create;
    begin
    end;

  function TBlockTree.GetItem( ix : cardinal ) : TBlock;
    begin
    end;

  procedure TBlockTree.SetItem( ix : cardinal; val : T );
    begin
    end;

#+end_src

** TODO TBlockChain
*** About
In storing our database, we have a couple of goals that at first glance might seem to be in conflict:

- We want to keep the database small and tightly packed.
- We want tables to have room to grow.

Chains resolve the conflict by allowing us to break tables into chunks.

=TBlockChain= is essentially a linked list of block handles. The individual blocks are only loaded into ram when they are actually used.

*** DONE interface and component types
#+begin_src pascal
  type
    TRamChain  = class
      private type
        TRamState  = ( rsStub, rsLoaded, rsChanged );
        TRamBlock  = record
          ID    : sd.TBlockID;
          block : sd.TBlock;
          state : TRamState;
        end;
        TRamBlocks = specialize li.list<TRamBlock>;
      public
        constructor Create( );
        function GetItem( ix : cardinal ) : TBlock;
        property item[ ix : cardinal ] : TBlock read GetItem default;
      end;
#+end_src

#+begin_src pascal

  constructor TBlockChain.Create;
    begin
    end;

  function TBlockChain.GetItem( ix : cardinal ) : TBlock;
    begin
    end;

  procedure TBlockChain.SetItem( ix : cardinal; val : T );
    begin
    end;

#+end_src

*** TODO mark changed blocks as dirty
#+begin_src
#+end_src
** [4/5] TYPE TArrayList for storing data inside a TBlockChain
*** About
It seems like we ought to have a type that would represent strings in-block.
Perhaps even something that would represent arbitrary data structures as they were spread out over a linked list. Something like an ArrayList in java.
*** DONE TArrayList interface
#+begin_src pascal
  type
    TAddress : record
                 blockID : TBlockID;
                 offset  : cardinal;
               end;
    TBlocks : array of integer;
    generic TArrayList<T> = class
     private
      _chain     : TRamChain;
      _count     : cardinal;  { total number of <T> items }
      _headCount : cardinal;  { number of <T> in the first block (may start partway in) }
      _address   : TAddress;  { start address of the list }
      _perBlock  : cardinal;  { sizeof(T)/sizeof(block) }
      _blocks    : TBlocks;   { _blocks[0] = _address.blockID }
      function locate( ix : cardinal ) : TAddress;
     public
      function Create( chain : TRamChain );
      function GetItem( ix : cardinal ) : T;
      procedure SetItem( ix : cardinal; val : T );
      property item[ ix : cardinal ] : T read GetItem write SetItem; default;
    end;
#+end_src

*** TODO TArrayList.Create
*** DONE TArrayList.locate
This calculates the location of a particular entry within the list and returns a reference.
#+begin_src pascal
  function TArrayList.locate( ix : cardinal ) : TAddress;
    begin
      if ix >= _count then raise ERangeCheckError.Create('out of bounds');
      if ix < _headCount then
        begin
          result.blockID := _address.blockID;
          result.offset  := _address.offset + ix * sizeOf(T);
        end
      else
        DivMod( ix - _headCount, _perBlock, result.blockID, result.offset );
    end;
#+end_src

*** DONE TArrayList.GetItem
#+begin_src pascal
  function GetItem( ix : cardinal ) : T;
    begin
      move(_chain[self.locate(ix)]^, result, sizeof(T));
    end;
#+end_src

*** DONE TArrayList.SetItem
#+begin_src pascal
  procedure SetItem( ix : cardinal; val : T );
    begin
      move(val, _chain[self.locate(ix)]^, sizeof(T));
    end;
#+end_src

** TODO block allocation : =NextInChain= / =NextFreeBlock=
#+begin_src pascal
  function NextInChain( block : TBlockID ) : TBlockID;
    begin
      todo;
      result := 0
    end;
  function NextFreeBLock : TBlockID;
    begin
      todo;
      result := 0
    end;
#+end_src
* [0/1] The database layer
** TODO auto-increments : =TNextID=
#+begin_src delphi
  function TNextID( tableID  );
    begin
      todo
    end;
#+end_src
** DataStore Interface (for strings and arrays of numbers)
#+begin_src pascal
  type IDataStore = interface
    function StoreString( const s : string ) : TTupleID;
    function FetchString( const i : TStringID ) : string;
    function StoreArray( const s : string ) : TTArrayID;
    function FetchArray( const i : TTArrayID ) : TArray;
  end;
#+end_src
*** TODO text storage
#+begin_src delphi
  type
    TTextMeta = record
      ID     : TNID;
      prefix : array[ 0 .. 3 ] of char;
      start  : Int32;
      hash   : Int32;
    end;
  procedure StoreText( txt : string );
    var meta : TTextMeta;
    begin
      MakeTextMeta( txt, meta )
    end;
#+end_src
*** TODO text lookup
#+begin_src pascal
  procedure bytesToBlocks(bytes : cardinal; out num, extra: cardinal);
    begin
      firstChunk := pageSize - offset;
      DivMod( strLen - firstChunk, pageSize, num, extra );
    end;
  procedure FindText( key : TNid );
    var start, blocks, offs : int32;
    procedure findTheStartBlock;
      begin
        startAddr := bptree.lookup( key );
        DivMod( startAddr, pageSize, startPage, offset );
      end;
    begin
      findTheStartBlock( key );
      bytesToBlocks( numBlocks, extra );
    end;
#+end_src
*** TODO grab the hash method from di.pas
** Relational Interface
#+begin_src pascal
  type IRelStore = interface
    function StoreTuple( const r : TRelation; const t : TTuple ) : TTupleID;
    function FetchTuple( const r : TRelation; const i : TTupleID ) : TTuple;
  end;
#+end_src

*** tuple store : extract a module from ~bp.pas~
- file:bplus.org already has the basics
*** tuple lookup
Hopefully, rows are pretty small so there isn't really much wasted space. A block size with a lot of different prime factors would probably help things fit.

#+begin_src pascal
  procedure FindBlockForTuple;
  begin
    DivMod(rowSize, blockSize, rowsPerBlock, extraSpace);
    DivMod(rowsPerBlock, rowToFind, result, plusRows);
    if plusRows > 0 then inc(result);
    { then just follow the chain for that many blocks }
  end;
#+end_src

** GraphStore interface for general data.
#+begin_src pascal
  type IGraphStore = interface
    function StoreEdge( const e : TEdge ) : TEID;
    function FetchEdge( const i : TEID ) : TEdge;
    function StoreNode( const n : TNode ) : TNID;
    function FetchNode( const i : TNID ) : TNode;
  end;
#+end_src
* TODO format of the first block (metadata)


