#+title: minrel tables

* TODO core minrel tables
:PROPERTIES:
:TS:       <2013-05-15 07:12AM>
:ID:       ssaj7fo034g0
:END:

** TODO =mr_keys=
:PROPERTIES:
:TS:       <2013-05-15 07:30AM>
:ID:       d03a3ap034g0
:END:
- We track =keys= separately from from =cols= because many columns might all reference the same key, even within a table.
- Keys may or may not have types.
*** data
| key:id | key:name |
|--------+----------|
|      1 |          |
|        |          |

** TODO =mr_tables=
:PROPERTIES:
:TS:       <2013-05-15 07:17AM>
:ID:       a5rjono034g0
:END:
| rel:id | rel:name    | rel:comment            | rel:locked? |
|--------+-------------+------------------------+-------------|
|      1 | =mr_keys=     |                        |             |
|      2 | =mr_rels=     | list of relations      |           0 |
|      3 | =mr_columns=  | list of fieldss        |           0 |
|      4 | =mr_types=    | list of type ids       |           0 |
|      5 | =mr_variants= | list of compound types |           0 |

** TODO =mr_types=
:PROPERTIES:
:TS:       <2013-05-15 07:35AM>
:ID:       rzigbip034g0
:END:
| key:id |
|        |


** TODO =mr_columns=
:PROPERTIES:
:TS:       <2013-05-15 07:17AM>
:ID:       h23d3no034g0
:END:
| rel:id | key:id | col:ord | col:label |
|--------+--------+---------+-----------+
|      1 |      1 |       1 | 'rel:id'  |
|        |        |         |           |

- foreign key relationships
- unique?
- contained type

** TODO =mr_types= and =mr_variants=
:PROPERTIES:
:TS:       <2013-05-15 07:18AM>
:ID:       dwv47qo034g0
:END:
These would track:

- types
- polymorphic tables
- nested tables
- recursive tables (transitive closure)


* TODO scanner table
:PROPERTIES:
:TS:       <2013-05-15 07:13AM>
:ID:       xv3klgo034g0
:END:


* TODO drupal-style content management tables
:PROPERTIES:
:TS:       <2013-05-15 07:12AM>
:ID:       x2sezfo034g0
:END:


* TODO data trail
:PROPERTIES:
:TS:       <2013-05-15 07:46AM>
:ID:       5cf6qzp034g0
:END:


| typ  |
|------|
| Int  |
| Nat  |
| Num  |
| Tup  |
| Str  |
| Txt  |
| Byte |
| Char |
| Enum |

#+begin_src prolog
for e in {   } assert( typ( int ));
typ( num );
typ( tup );
typ( 
key( key:id, key:name );
#+end_src
