#+title: org.pas : an org-mode unit for pascal
* license
copyright 2012 michal j. wallace <[[http://tangentstorm.com/]]>
inspired by orgnode.py,
copyright 2010 charles cave <[[http://members.optusnet.com.au/~charles57/GTD]]>

* [2/2] data types
** DONE orgnode data type
** DONE global token type
* [5/5] org parser
** DONE main parser routine
** DONE parse headlines
** DONE parse block
** DONE parse drawer
** DONE parse tables

* TODO [4/4] emitter class
** DONE declaration
** DONE emit comment line
** DONE emit verbatim lines
** DONE emit markup lines

* orgnode subclasses
* class =table_node=
** DONE =table_node.row=

** DONE =table_node.divider=

** DONE =block_node.consume_end=

** DONE =drawer_node.consume_end=

* parser
| node | pat  | rep | xform | keep  | type  |
|------+------+-----+-------+-------+-------|
| meta | '#+' |     |       |       |       |
| .    | iden |     |       | token | mltok |
| .    | any  | *?  |       | value | node  |
| .    | eol  |     |       |       |       |
|------+------+-----+-------+-------+-------|
| hdln | '*'  | +   | len   | depth | byte  |

 
* templates
| meta | 0 |   |

* TODO [2/10] things that go elsewhere
** TODO add d-style method syntax to any type                    :wejal:fpc:
#+begin_src pascal
  function get_method( typ, meth );
  begin
    if find_method( typ, meth ) then
    else find_function( typ, meth )
  end;
#+end_src

** DONE test for stri.startswith
** DONE stri.startswith

** TODO generate visitor interfaces                                    :grin:
** TODO generate default visitor
** TODO generate pretty printer
** TODO color-coded grammars like in colorforth?
** TODO for/with/on ... do(name:blah) as lambdas                      :wejal:
#+begin_src wejal
case type x : base of
  type : do
end
#+end_src

** TODO xs : [x] \rarr type txs : specialize list<x>
** TODO ocaml-style "of" syntax for generic containers
